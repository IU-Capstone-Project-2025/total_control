<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_2home_2ws_2src_2firmware_2main_2main_8c-example" kind="example">
    <compoundname>/home/ws/src/firmware/main/main.c</compoundname>
    <briefdescription>
<para>Logs TWAI message contents in human-readable format. </para>
    </briefdescription>
    <detaileddescription>
<para>Logs TWAI message contents in human-readable formatFormats and outputs the complete TWAI message structure including:<itemizedlist>
<listitem><para>Identifier</para>
</listitem><listitem><para>Data length code</para>
</listitem><listitem><para>All 8 data bytes (even if unused)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Logging tag for ESP_LOG* system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the message structure to log</para>
</parameterdescription>
</parameteritem>
</parameterlist>
twai_output(&quot;CAN&quot;, &amp;msg); // Output: CAN: 141 [8] 01 02 03 04 05 06 07 08 <programlisting filename="/home/ws/src/firmware/main/main.c"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/semphr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_system.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_err.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_pm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/twai.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/uart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------<sp/>Definitions<sp/>------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CTRL_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERIAL_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAVER_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_TASK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_DEFAULT<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TX_GPIO_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RX_GPIO_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_LINEAR_GPIO_1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_LINEAR_GPIO_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_ANGULAR_GPIO_A<sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_ANGULAR_GPIO_B<sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_ANGULAR_GPIO_C<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BTN_GPIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_PIN_MASK(PIN)<sp/><sp/><sp/><sp/><sp/><sp/>(1ULL&lt;&lt;PIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ANGLE_STEP_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.08789</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_ECNODER_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12213</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAFE_REGION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INIT_TORQUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REINIT_TORQUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TXD_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RXD_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UART_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_NUM_0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUF_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BAUD_RATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>921600<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERIAL_MS_DELAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERROR_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAIN_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Main&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Debug&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEND_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Motor/Sending&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECIEVE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Motor/Recieving&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READ_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;PC/Recieving&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WRITE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;PC/Sending&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MOTOR_STOP_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/>1000000</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READY_STATE_COMMAND<sp/><sp/><sp/><sp/><sp/>1000001<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MOTOR_INFO_COMMMAND<sp/><sp/><sp/><sp/><sp/>1000002</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RESET_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000003</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>DEBUG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------<sp/>Static<sp/>variables<sp/>------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_timing_config_t<sp/>t_config<sp/>=<sp/>TWAI_TIMING_CONFIG_1MBITS();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_filter_config_t<sp/>f_config<sp/>=<sp/>TWAI_FILTER_CONFIG_ACCEPT_ALL();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_general_config_t<sp/>g_config<sp/>=<sp/>TWAI_GENERAL_CONFIG_DEFAULT(<ref refid="main_8c_1a98b0a06b2764e462ea87110a5aa91ca5" kindref="member">TX_GPIO_CAN</ref>,<sp/><ref refid="main_8c_1aa95f54fc36b7962a273ae23f57262c29" kindref="member">RX_GPIO_CAN</ref>,<sp/>TWAI_MODE_NORMAL);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>motor_control_task_start_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>all_done_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>init_start_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>init_done_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>btn_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>move_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>smert_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>info_please_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>test_sem;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>motor_id<sp/>=<sp/>0x141;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>recieved_packet;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" kindref="member">encoder_position_prev</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>=<sp/>-83;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" kindref="member">encoder_angle_prev</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>not_inited_yet<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_safe_state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" kindref="member">uart_get_delay</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" kindref="member">uart_get_mode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" kindref="member">uart_oper_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" kindref="member">uart_test_btn_state</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" kindref="member">uart_test_encoder_state</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" kindref="member">uart_test_angle_state</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*uart_state)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>sensor_info_sender_delay<sp/>=<sp/><ref refid="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" kindref="member">SERIAL_MS_DELAY</ref>;</highlight></codeline>
<codeline><highlight class="normal">TimerHandle_t<sp/><ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" kindref="member">sensor_info_sender_timer</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>mct_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>uet_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>msst_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>sist_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>stt_handle;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Hardware<sp/>CAN<sp/>Functions<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>twai_request(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_message_t<sp/>*_tx_message,<sp/>twai_message_t<sp/>*_rx_message)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_transmit(_tx_message,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_message-&gt;identifier<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>twai_receive(_rx_message,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rx_message-&gt;identifier<sp/>!=<sp/>motor_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>reply<sp/>from<sp/>motor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>twai_request_wo_id_check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_message_t<sp/>*_tx_message,<sp/>twai_message_t<sp/>*_rx_message)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_transmit(_tx_message,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_message-&gt;identifier<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>twai_receive(_rx_message,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>twai_output(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tag,<sp/>twai_message_t<sp/>*message)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(tag,<sp/></highlight><highlight class="stringliteral">&quot;%lx<sp/>[%u]<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;identifier,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data_length_code,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[0],<sp/>message-&gt;data[1],<sp/>message-&gt;data[2],<sp/>message-&gt;data[3],<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[4],<sp/>message-&gt;data[5],<sp/>message-&gt;data[6],<sp/>message-&gt;data[7]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_my_id()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0x141;<sp/>i<sp/>&lt;=<sp/>0x160;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>={.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_id,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_request(&amp;tx_message,<sp/>&amp;rx_message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx_message.identifier<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_id<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>found,<sp/>motor_id<sp/>is<sp/>%lx&quot;</highlight><highlight class="normal">,<sp/>motor_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Motor<sp/>Control<sp/>Functions<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>motor_request(uint8_t<sp/>d0,<sp/>uint8_t<sp/>d1,<sp/>uint8_t<sp/>d2,<sp/>uint8_t<sp/>d3,<sp/>uint8_t<sp/>d4,<sp/>uint8_t<sp/>d5,<sp/>uint8_t<sp/>d6,<sp/>uint8_t<sp/>d7)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>=<sp/>{.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_id,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7}};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEGUB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_output(<ref refid="main_8c_1a1e7be5183998bdbe8079e0f3276ada46" kindref="member">SEND_TAG</ref>,<sp/>&amp;tx_message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!twai_request(&amp;tx_message,<sp/>&amp;rx_message)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_output(<ref refid="main_8c_1a3191b64f52225c44bead05ce0937704b" kindref="member">RECIEVE_TAG</ref>,<sp/>&amp;rx_message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_output(<ref refid="main_8c_1a3191b64f52225c44bead05ce0937704b" kindref="member">RECIEVE_TAG</ref>,<sp/>&amp;rx_message);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!twai_request(&amp;tx_message,<sp/>&amp;rx_message)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_wo_reply(uint8_t<sp/>d0,<sp/>uint8_t<sp/>d1,<sp/>uint8_t<sp/>d2,<sp/>uint8_t<sp/>d3,<sp/>uint8_t<sp/>d4,<sp/>uint8_t<sp/>d5,<sp/>uint8_t<sp/>d6,<sp/>uint8_t<sp/>d7)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>=<sp/>{.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_id,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7}};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>twai_request_wo_id_check(&amp;tx_message,<sp/>&amp;rx_message);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_stop()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x81,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x80,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_system_reset()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_wo_reply(0x76,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_info()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_shutdown()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x80,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_torque(int16_t<sp/>tau)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0xA1,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>(uint8_t)<sp/>(-tau),<sp/>(uint8_t)<sp/>(-tau<sp/>&gt;&gt;<sp/>8),<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_speed(int32_t<sp/>vel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vel<sp/>*=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0xA2,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>(uint8_t)<sp/>(vel),<sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>8),<sp/><sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>16),<sp/><sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>24));<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>motor_request_is_connected(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>motor_request(0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Motor<sp/>Control<sp/>Task<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_control_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_system_reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_info();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(move_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_torque(recieved_packet);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_init_function()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>torque<sp/>=<sp/><ref refid="main_8c_1afb21a93b38c1ccbd2a1635f9086ed645" kindref="member">INIT_TORQUE</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!not_inited_yet){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque<sp/>=<sp/><ref refid="main_8c_1aaa61e74d6a0accc4b34f963b13083c6f" kindref="member">REINIT_TORQUE</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>motor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_torque(-torque);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>pdMS_TO_TICKS(5000));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>CLICKED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_torque(torque);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>time<sp/>=<sp/>esp_timer_get_time()/1000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>&lt;<sp/><ref refid="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" kindref="member">MAX_ECNODER_DATA</ref><sp/>/<sp/>2){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>+<sp/>3000<sp/>&lt;<sp/>esp_timer_get_time()/1000){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>initialization<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not_inited_yet){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(init_done_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initialize<sp/>ended&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_self_saver_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(init_done_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>not_inited_yet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(encoder_position<sp/>&lt;<sp/>SAFE_REGION<sp/>||<sp/>encoder_position<sp/>&gt;<sp/><ref refid="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" kindref="member">MAX_ECNODER_DATA</ref><sp/>-<sp/><ref refid="main_8c_1aad4992ec0ccc026b5ba5926650548255" kindref="member">SAFE_REGION</ref>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_safe_state<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Danger<sp/>situation,<sp/>stopping<sp/>motor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_init_function();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_safe_state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>UART<sp/>Handler<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" kindref="member">uart_init_setup</ref>()<sp/></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_config_t<sp/>uart_config<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baud_rate<sp/>=<sp/><ref refid="main_8c_1ad4455691936f92fdd6c37566fc58ba1f" kindref="member">BAUD_RATE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_bits<sp/>=<sp/>UART_DATA_8_BITS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.parity<sp/>=<sp/>UART_PARITY_DISABLE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stop_bits<sp/>=<sp/>UART_STOP_BITS_1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flow_ctrl<sp/>=<sp/>UART_HW_FLOWCTRL_DISABLE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.source_clk<sp/>=<sp/>UART_SCLK_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_param_config(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/>&amp;uart_config));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_set_pin(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/><ref refid="main_8c_1a271a735bd865e77e0d27b09e5fd958f2" kindref="member">TXD_PIN</ref>,<sp/><ref refid="main_8c_1adc7d6fe2220359137dc87ba264524f96" kindref="member">RXD_PIN</ref>,<sp/>UART_PIN_NO_CHANGE,<sp/>UART_PIN_NO_CHANGE));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_driver_install(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/><ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref><sp/>*<sp/>2,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" kindref="member">uart_event_task</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvParameters)<sp/></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(<ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>memset(data,<sp/>0,<sp/><ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rxBytes<sp/>=<sp/>uart_read_bytes(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/>data,<sp/><ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>,<sp/>pdMS_TO_TICKS(<ref refid="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" kindref="member">SERIAL_MS_DELAY</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxBytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state(data);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>UART<sp/>states<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" kindref="member">rtoo</ref>()<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>READY<sp/>to<sp/>OPERATIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" kindref="member">uart_oper_state</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref><sp/>=<sp/>xTimerCreate(</highlight><highlight class="stringliteral">&quot;sensor_info_sender_timer&quot;</highlight><highlight class="normal">,<sp/>pdMS_TO_TICKS(sensor_info_sender_delay),<sp/>pdTRUE,<sp/>0,<sp/><ref refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" kindref="member">sensor_info_sender_timer</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerStart(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" kindref="member">otor</ref>()<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OPERATIONAL<sp/>to<sp/>READY</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerStop(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerDelete(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;START_OPER&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>operational<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" kindref="member">rtoo</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;RESTART&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(all_done_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;HELP&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Possible<sp/>commands\nSTART_OPER<sp/>-<sp/>starting<sp/>operational<sp/>(experiment)<sp/>state<sp/>\nRESTART<sp/>-<sp/>software<sp/>restart<sp/>the<sp/>controller<sp/>(also<sp/>sofware<sp/>reboots<sp/>motor)\nSTART_TESTS<sp/>-<sp/>hardware<sp/>sensor<sp/>tests\nMOTOR_FIND<sp/>-<sp/>try<sp/>to<sp/>find<sp/>motor<sp/>id<sp/>and<sp/>start<sp/>communicating\nMOTOR_INFO<sp/>-<sp/>requests<sp/>info<sp/>from<sp/>motor<sp/>(voltage,<sp/>temperature,<sp/>errors)\nMOTOR_RESET<sp/>-<sp/>software<sp/>resetting<sp/>the<sp/>motor\nMOTOR_INIT<sp/>-<sp/>centering<sp/>the<sp/>carriage,<sp/>initializing<sp/>true<sp/>encoder<sp/>position<sp/>and<sp/>activating<sp/>dead<sp/>zones\nMOTOR_MODE<sp/>-<sp/>switch<sp/>contolling<sp/>modes\nDATA_SEND_MODE<sp/>-<sp/>cofigure<sp/>sending<sp/>joint<sp/>info<sp/>sending\nENCODER_POSITION<sp/>-<sp/>request<sp/>single<sp/>position\nENCODER_ANGLE<sp/>-<sp/>request<sp/>single<sp/>angle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;START_TESTS&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" kindref="member">uart_test_btn_state</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;HELLO&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;hi<sp/>there&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>motoro<sp/>control<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_MODE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Possible<sp/>variants\nTORQUE,<sp/>SPEED,<sp/>POSITION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" kindref="member">uart_get_mode</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_FIND&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_my_id();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_RESET&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_system_reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_INFO&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_info();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_INIT&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_init_function();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>data<sp/>sending<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;DATA_SEND_MODE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conifgure<sp/>data<sp/>sending<sp/>protocols,<sp/>write<sp/>delay<sp/>(ms)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" kindref="member">uart_get_delay</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getters</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;ENCODER_POSITION&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Position<sp/>is<sp/>%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;ENCODER_ANGLE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Angle<sp/>is<sp/>%f&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" kindref="member">uart_get_mode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data){<sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;TORQUE&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>is<sp/>configured<sp/>to<sp/>torque<sp/>control<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;SPEED&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>is<sp/>configured<sp/>to<sp/>speed<sp/>control<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>is<sp/>configured<sp/>to<sp/>position<sp/>control<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" kindref="member">uart_get_delay</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_info_sender_delay<sp/>=<sp/>atoi(data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Delay<sp/>is<sp/>configured<sp/>to<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>sensor_info_sender_delay);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" kindref="member">uart_oper_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;i<sp/>recieved&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;in<sp/>oper<sp/>state\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>recieved_packet<sp/>=<sp/>atoi(data);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in_safe_state)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>&lt;<sp/>INT16_MIN<sp/>||<sp/>recieved_packet<sp/>&gt;<sp/>INT16_MAX){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1a2012f1090db37579663427aece0ec815" kindref="member">MOTOR_STOP_COMMAND</ref>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1a439fa6d18fd0b0edb588a9ead0e1c96d" kindref="member">READY_STATE_COMMAND</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>ready<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" kindref="member">otor</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1a3dfba5629cbd9c6fd33e0705f38223ef" kindref="member">MOTOR_INFO_COMMMAND</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_info();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1ac950ebd1ed784f784eb48dfe838a5eb1" kindref="member">RESET_COMMAND</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" kindref="member">otor</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(all_done_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recieved_packet<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(move_sem);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" kindref="member">sensor_info_sender_task</ref>(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(info_please_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>linear_velocity<sp/>=<sp/>(<ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>-<sp/><ref refid="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" kindref="member">encoder_position_prev</ref>)<sp/>*<sp/>1000<sp/>/<sp/>sensor_info_sender_delay;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angular_velocity<sp/>=<sp/>(<ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>-<sp/><ref refid="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" kindref="member">encoder_angle_prev</ref>)<sp/>*<sp/>1000<sp/>/<sp/>sensor_info_sender_delay;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" kindref="member">encoder_angle_prev</ref><sp/>=<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" kindref="member">encoder_position_prev</ref><sp/>=<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_safe_state){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>%ld<sp/>%f<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>,<sp/>linear_velocity,<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>,<sp/>angular_velocity);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" kindref="member">sensor_info_sender_timer</ref>(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>xSemaphoreGive(info_please_sem);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*--------------------------<sp/>Sensors<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>enc_linear_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>+=<sp/>(gpio_get_level(<ref refid="main_8c_1a915403e642b167c299184f42c797d992" kindref="member">ENC_LINEAR_GPIO_1</ref>)<sp/>!=<sp/>gpio_get_level(<ref refid="main_8c_1ae2ae2d204f050a9bbba2b10129cece43" kindref="member">ENC_LINEAR_GPIO_2</ref>))<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>enc_angular_change_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>-=<sp/><ref refid="main_8c_1aee5d1576823e62ca3a2782773b592c2c" kindref="member">ANGLE_STEP_SIZE</ref><sp/>*<sp/>(1<sp/>-<sp/>gpio_get_level(<ref refid="main_8c_1a9e4f2ac9257ce6f3572c176005693d38" kindref="member">ENC_ANGULAR_GPIO_A</ref>)<sp/>*<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>enc_angular_zero_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>btn_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGiveFromISR(btn_sem,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_init_setup()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.intr_type<sp/>=<sp/>GPIO_INTR_ANYEDGE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1a915403e642b167c299184f42c797d992" kindref="member">ENC_LINEAR_GPIO_1</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.intr_type<sp/>=<sp/>GPIO_INTR_DISABLE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1ae2ae2d204f050a9bbba2b10129cece43" kindref="member">ENC_LINEAR_GPIO_2</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>angular</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1a9e4f2ac9257ce6f3572c176005693d38" kindref="member">ENC_ANGULAR_GPIO_A</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.intr_type<sp/>=<sp/>GPIO_INTR_DISABLE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1ae757297f37dc8a86ef65e94ca81bbd26" kindref="member">ENC_ANGULAR_GPIO_B</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1ac8ffb6e9d68e4a092a57637b71135f5e" kindref="member">ENC_ANGULAR_GPIO_C</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>button<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" kindref="member">BTN_GPIO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupts<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_install_isr_service(<ref refid="main_8c_1af8baf7d9859733667317e58c0ff707d1" kindref="member">ESP_INTR_FLAG_DEFAULT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1a915403e642b167c299184f42c797d992" kindref="member">ENC_LINEAR_GPIO_1</ref>,<sp/>enc_linear_isr_handler,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1ae757297f37dc8a86ef65e94ca81bbd26" kindref="member">ENC_ANGULAR_GPIO_B</ref>,<sp/>enc_angular_change_isr_handler,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1ac8ffb6e9d68e4a092a57637b71135f5e" kindref="member">ENC_ANGULAR_GPIO_C</ref>,<sp/>enc_angular_zero_isr_handler,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" kindref="member">BTN_GPIO</ref>,<sp/>btn_isr_handler,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>CPU<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a5b74c511125700f64d5e221ec037277c" kindref="member">cpu_setup</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>esp_pm_config_t<sp/>pm_config<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_freq_mhz<sp/>=<sp/>240,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min_freq_mhz<sp/>=<sp/>240,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.light_sleep_enable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>esp_pm_configure(&amp;pm_config);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>Tests<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" kindref="member">sensor_tests</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Press<sp/>the<sp/>button&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>YOU<sp/>press<sp/>the<sp/>button?<sp/>y/n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>start_encoder_position<sp/>=<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>move<sp/>a<sp/>carriage&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_encoder_position<sp/>-<sp/>encoder_position<sp/>&lt;<sp/>1000<sp/>&amp;&amp;<sp/>start_encoder_position<sp/>-<sp/>encoder_position<sp/>&gt;<sp/>-1000){vTaskDelay(pdMS_TO_TICKS(100));}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>YOU<sp/>move<sp/>the<sp/>carriage?<sp/>y/n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start_encoder_angle<sp/>=<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Swing<sp/>a<sp/>pendulum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_encoder_angle<sp/>-<sp/>encoder_angle<sp/>&lt;<sp/>30<sp/>&amp;&amp;<sp/>start_encoder_angle<sp/>-<sp/>encoder_angle<sp/>&gt;<sp/>-30){vTaskDelay(pdMS_TO_TICKS(100));}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>YOU<sp/>swing<sp/>the<sp/>pendulum?<sp/>y/n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tested){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Tests<sp/>are<sp/>finished&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Malfunctions<sp/>found,<sp/>robot<sp/>needs<sp/>a<sp/>service!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" kindref="member">uart_test_btn_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>works<sp/>properly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>doesnt<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" kindref="member">uart_test_encoder_state</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" kindref="member">uart_test_encoder_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Encoder<sp/>works<sp/>properly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Encoder<sp/>doesnt<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" kindref="member">uart_test_angle_state</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" kindref="member">uart_test_angle_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Angle<sp/>sensor<sp/>works<sp/>properly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Angle<sp/>sensor<sp/>doesnt<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Main<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a5b74c511125700f64d5e221ec037277c" kindref="member">cpu_setup</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>tasks,<sp/>queues,<sp/>and<sp/>semaphores</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>all_done_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>move_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>smert_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>btn_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>init_start_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>init_done_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>info_please_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_init_setup();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" kindref="member">uart_init_setup</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_driver_install(&amp;g_config,<sp/>&amp;t_config,<sp/>&amp;f_config));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_start());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(motor_control_task,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;motor_control&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1a7b5e0b4f961899d86c33d9e13ca7633a" kindref="member">CTRL_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>&amp;mct_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" kindref="member">uart_event_task</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;serial_handler&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1ab6ca39f48ecd3c48ffd44ab7acc49a08" kindref="member">SERIAL_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/>&amp;uet_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(motor_self_saver_task,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;motor_self_saver&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1ab2e0bab723af75f956a0ad1660d95ae8" kindref="member">SAVER_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/><sp/>&amp;msst_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" kindref="member">sensor_info_sender_task</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;jonit_info&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1ab6ca39f48ecd3c48ffd44ab7acc49a08" kindref="member">SERIAL_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/>&amp;sist_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" kindref="member">sensor_tests</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1a18b821454d423ce574a4e08c3d35d1be" kindref="member">TEST_TASK_PRIO</ref>,<sp/><sp/><sp/><sp/><sp/>&amp;stt_handle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Ready<sp/>to<sp/>use&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(all_done_sem,<sp/>portMAX_DELAY);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(mct_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(uet_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(msst_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(sist_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(stt_handle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_stop());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_driver_uninstall());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(all_done_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(move_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(smert_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(btn_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(init_start_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(init_done_sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(test_sem);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Restarting...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>esp_restart();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="/home/ws/src/firmware/main/main.c"/>
  </compounddef>
</doxygen>
