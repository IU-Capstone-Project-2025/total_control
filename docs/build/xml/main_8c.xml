<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">freertos/FreeRTOS.h</includes>
    <includes local="yes">freertos/task.h</includes>
    <includes local="yes">freertos/semphr.h</includes>
    <includes local="yes">esp_system.h</includes>
    <includes local="yes">esp_err.h</includes>
    <includes local="yes">esp_log.h</includes>
    <includes local="yes">esp_timer.h</includes>
    <includes local="yes">esp_pm.h</includes>
    <includes local="yes">driver/twai.h</includes>
    <includes local="yes">driver/uart.h</includes>
    <includes local="yes">driver/timer.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/ws/src/firmware/main/main.c</label>
        <link refid="main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>driver/timer.h</label>
      </node>
      <node id="13">
        <label>driver/twai.h</label>
      </node>
      <node id="14">
        <label>driver/uart.h</label>
      </node>
      <node id="9">
        <label>esp_err.h</label>
      </node>
      <node id="10">
        <label>esp_log.h</label>
      </node>
      <node id="12">
        <label>esp_pm.h</label>
      </node>
      <node id="8">
        <label>esp_system.h</label>
      </node>
      <node id="11">
        <label>esp_timer.h</label>
      </node>
      <node id="5">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="7">
        <label>freertos/semphr.h</label>
      </node>
      <node id="6">
        <label>freertos/task.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="main_8c_1a7b5e0b4f961899d86c33d9e13ca7633a" prot="public" static="no">
        <name>CTRL_TSK_PRIO</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="27" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ab6ca39f48ecd3c48ffd44ab7acc49a08" prot="public" static="no">
        <name>SERIAL_TSK_PRIO</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="28" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ab2e0bab723af75f956a0ad1660d95ae8" prot="public" static="no">
        <name>SAVER_TSK_PRIO</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="29" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a18b821454d423ce574a4e08c3d35d1be" prot="public" static="no">
        <name>TEST_TASK_PRIO</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="30" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1af8baf7d9859733667317e58c0ff707d1" prot="public" static="no">
        <name>ESP_INTR_FLAG_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="32" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a98b0a06b2764e462ea87110a5aa91ca5" prot="public" static="no">
        <name>TX_GPIO_CAN</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="34" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa95f54fc36b7962a273ae23f57262c29" prot="public" static="no">
        <name>RX_GPIO_CAN</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="35" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a915403e642b167c299184f42c797d992" prot="public" static="no">
        <name>ENC_LINEAR_GPIO_1</name>
        <initializer>19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="36" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae2ae2d204f050a9bbba2b10129cece43" prot="public" static="no">
        <name>ENC_LINEAR_GPIO_2</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="37" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a9e4f2ac9257ce6f3572c176005693d38" prot="public" static="no">
        <name>ENC_ANGULAR_GPIO_A</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="38" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae757297f37dc8a86ef65e94ca81bbd26" prot="public" static="no">
        <name>ENC_ANGULAR_GPIO_B</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="39" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ac8ffb6e9d68e4a092a57637b71135f5e" prot="public" static="no">
        <name>ENC_ANGULAR_GPIO_C</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="40" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" prot="public" static="no">
        <name>BTN_GPIO</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="41" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a284c58b2f63f601826cfcd46eaea929b" prot="public" static="no">
        <name>GPIO_PIN_MASK</name>
        <param><defname>PIN</defname></param>
        <initializer>(1ULL&lt;&lt;PIN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="42" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aee5d1576823e62ca3a2782773b592c2c" prot="public" static="no">
        <name>ANGLE_STEP_SIZE</name>
        <initializer>0.08789</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="44" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" prot="public" static="no">
        <name>MAX_ECNODER_DATA</name>
        <initializer>12213</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="45" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aad4992ec0ccc026b5ba5926650548255" prot="public" static="no">
        <name>SAFE_REGION</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="46" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1afb21a93b38c1ccbd2a1635f9086ed645" prot="public" static="no">
        <name>INIT_TORQUE</name>
        <initializer>75</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="47" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aaa61e74d6a0accc4b34f963b13083c6f" prot="public" static="no">
        <name>REINIT_TORQUE</name>
        <initializer>75</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="48" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a271a735bd865e77e0d27b09e5fd958f2" prot="public" static="no">
        <name>TXD_PIN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="50" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1adc7d6fe2220359137dc87ba264524f96" prot="public" static="no">
        <name>RXD_PIN</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="51" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa7a5950d998e44d87137de0780bd0af3" prot="public" static="no">
        <name>UART_PORT</name>
        <initializer>UART_NUM_0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="52" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" prot="public" static="no">
        <name>BUF_SIZE</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="53" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ad4455691936f92fdd6c37566fc58ba1f" prot="public" static="no">
        <name>BAUD_RATE</name>
        <initializer>921600</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="54" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" prot="public" static="no">
        <name>SERIAL_MS_DELAY</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="55" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa29007116d11e676da62a3ae1dae4402" prot="public" static="no">
        <name>ERROR_TAG</name>
        <initializer>&quot;Error&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="57" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aafe49c5964527e250000ab014d9e541b" prot="public" static="no">
        <name>MAIN_TAG</name>
        <initializer>&quot;Main&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="58" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae6f84e8321c3bc4f546cf4a2a4798064" prot="public" static="no">
        <name>DEBUG_TAG</name>
        <initializer>&quot;Debug&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="59" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a1e7be5183998bdbe8079e0f3276ada46" prot="public" static="no">
        <name>SEND_TAG</name>
        <initializer>&quot;Motor/Sending&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="60" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3191b64f52225c44bead05ce0937704b" prot="public" static="no">
        <name>RECIEVE_TAG</name>
        <initializer>&quot;Motor/Recieving&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="61" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a0a1ec8eb6dcc1a3e9c83347f9a04974f" prot="public" static="no">
        <name>READ_TAG</name>
        <initializer>&quot;PC/Recieving&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="62" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" prot="public" static="no">
        <name>WRITE_TAG</name>
        <initializer>&quot;PC/Sending&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="63" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a2012f1090db37579663427aece0ec815" prot="public" static="no">
        <name>MOTOR_STOP_COMMAND</name>
        <initializer>1000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="65" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a439fa6d18fd0b0edb588a9ead0e1c96d" prot="public" static="no">
        <name>READY_STATE_COMMAND</name>
        <initializer>1000001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="66" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3dfba5629cbd9c6fd33e0705f38223ef" prot="public" static="no">
        <name>MOTOR_INFO_COMMMAND</name>
        <initializer>1000002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="67" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ac950ebd1ed784f784eb48dfe838a5eb1" prot="public" static="no">
        <name>RESET_COMMAND</name>
        <initializer>1000003</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="68" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8c_1ab158aca60145d27b56b0fd2457c07f72" prot="public" static="yes" mutable="no">
        <type>const twai_timing_config_t</type>
        <definition>const twai_timing_config_t t_config</definition>
        <argsstring></argsstring>
        <name>t_config</name>
        <initializer>= TWAI_TIMING_CONFIG_1MBITS()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="75" column="35" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a79589468673fbf10181e23d0b4c089e0" prot="public" static="yes" mutable="no">
        <type>const twai_filter_config_t</type>
        <definition>const twai_filter_config_t f_config</definition>
        <argsstring></argsstring>
        <name>f_config</name>
        <initializer>= TWAI_FILTER_CONFIG_ACCEPT_ALL()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="76" column="35" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ac25d69ac591839b233a7f62728ab9359" prot="public" static="yes" mutable="no">
        <type>const twai_general_config_t</type>
        <definition>const twai_general_config_t g_config</definition>
        <argsstring></argsstring>
        <name>g_config</name>
        <initializer>= TWAI_GENERAL_CONFIG_DEFAULT(<ref refid="main_8c_1a98b0a06b2764e462ea87110a5aa91ca5" kindref="member">TX_GPIO_CAN</ref>, <ref refid="main_8c_1aa95f54fc36b7962a273ae23f57262c29" kindref="member">RX_GPIO_CAN</ref>, TWAI_MODE_NORMAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="77" column="36" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ada82194adf287ba8cc4494cffbe20cb8" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t motor_control_task_start_sem</definition>
        <argsstring></argsstring>
        <name>motor_control_task_start_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="79" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a25b67dd34e5beae40d635006c3b1bf32" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t all_done_sem</definition>
        <argsstring></argsstring>
        <name>all_done_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="80" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ad0387a839002915fe6baa8559a408cba" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t init_start_sem</definition>
        <argsstring></argsstring>
        <name>init_start_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="81" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a7d86b2264671841f2bbf7d0c83a30f47" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t init_done_sem</definition>
        <argsstring></argsstring>
        <name>init_done_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="82" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a17fb07af0dd771bfec73431f890acdd4" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t btn_sem</definition>
        <argsstring></argsstring>
        <name>btn_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="83" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a33a51797d196bd2c2f8826a7cefa93ee" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t move_sem</definition>
        <argsstring></argsstring>
        <name>move_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="84" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a5d97b6819b726a82d9ad46649816a206" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t smert_sem</definition>
        <argsstring></argsstring>
        <name>smert_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="85" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ab350c9a292eccd57baa8a2f300d5ed4c" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t info_please_sem</definition>
        <argsstring></argsstring>
        <name>info_please_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="86" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa65cbc9ecbbc1c199db09d03750f5731" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t test_sem</definition>
        <argsstring></argsstring>
        <name>test_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="87" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1adfb44453bd87fd4f93ceb901cbf8749c" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t motor_id</definition>
        <argsstring></argsstring>
        <name>motor_id</name>
        <initializer>= 0x141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="89" column="17" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ac9f7634fea30227a987a9fe5d221bf0d" prot="public" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t recieved_packet</definition>
        <argsstring></argsstring>
        <name>recieved_packet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="90" column="16" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a5be258b451963084dd49c7e3ccef3d03" prot="public" static="no" mutable="no">
        <type>volatile int16_t</type>
        <definition>volatile int16_t encoder_position</definition>
        <argsstring></argsstring>
        <name>encoder_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="92" column="18" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" prot="public" static="no" mutable="no">
        <type>volatile int16_t</type>
        <definition>volatile int16_t encoder_position_prev</definition>
        <argsstring></argsstring>
        <name>encoder_position_prev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="93" column="18" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" prot="public" static="no" mutable="no">
        <type>volatile double</type>
        <definition>volatile double encoder_angle</definition>
        <argsstring></argsstring>
        <name>encoder_angle</name>
        <initializer>= -83</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="94" column="17" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" prot="public" static="no" mutable="no">
        <type>volatile double</type>
        <definition>volatile double encoder_angle_prev</definition>
        <argsstring></argsstring>
        <name>encoder_angle_prev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="95" column="17" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" prot="public" static="no" mutable="no">
        <type>volatile bool</type>
        <definition>volatile bool init_in_progress</definition>
        <argsstring></argsstring>
        <name>init_in_progress</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="96" column="15" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1adb0e31fc791c18cfa22fce905e03782e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool not_inited_yet</definition>
        <argsstring></argsstring>
        <name>not_inited_yet</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="97" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa9fd3235e6537c9b1abb6ee562b3cd35" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool in_safe_state</definition>
        <argsstring></argsstring>
        <name>in_safe_state</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="98" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aea6c54a26d8beb91b0fbbb948b6d51fb" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* uart_state) (char *)</definition>
        <argsstring>)(char *)</argsstring>
        <name>uart_state</name>
        <initializer>= <ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="109" column="8" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a5e191d15e5657b1a787e0c05b9553975" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t sensor_info_sender_delay</definition>
        <argsstring></argsstring>
        <name>sensor_info_sender_delay</name>
        <initializer>= <ref refid="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" kindref="member">SERIAL_MS_DELAY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="111" column="17" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" prot="public" static="no" mutable="no">
        <type>TimerHandle_t</type>
        <definition>TimerHandle_t sensor_info_sender_timer_handle</definition>
        <argsstring></argsstring>
        <name>sensor_info_sender_timer_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="112" column="15" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a3fc1dc2caf0675215399535ee7d119e1" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t mct_handle</definition>
        <argsstring></argsstring>
        <name>mct_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="115" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1af3af826787b86e0d6455da68b290fbc1" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t uet_handle</definition>
        <argsstring></argsstring>
        <name>uet_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="116" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ae4c17a2d5197a424f3b4249ab9f244e1" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t msst_handle</definition>
        <argsstring></argsstring>
        <name>msst_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="117" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a5465382970260e68c20be62201134588" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t sist_handle</definition>
        <argsstring></argsstring>
        <name>sist_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="118" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a6a9349403642edeeec2bf4f742c299ed" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t stt_handle</definition>
        <argsstring></argsstring>
        <name>stt_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="119" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a4497ae342d9058ddf35eb3726f63703e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool tested</definition>
        <argsstring></argsstring>
        <name>tested</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="121" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_ready_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_ready_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="487" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="487" bodyend="538" declfile="/home/ws/src/firmware/main/main.c" declline="100" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_get_delay</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_get_delay</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="558" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="558" bodyend="562" declfile="/home/ws/src/firmware/main/main.c" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_get_mode</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_get_mode</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="544" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="544" bodyend="555" declfile="/home/ws/src/firmware/main/main.c" declline="102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_oper_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_oper_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="565" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="565" bodyend="598" declfile="/home/ws/src/firmware/main/main.c" declline="103" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a96867752fbeb1da02accb4566f93b96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_test_btn_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_btn_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="759" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="759" bodyend="772" declfile="/home/ws/src/firmware/main/main.c" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_test_encoder_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_encoder_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="775" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="775" bodyend="788" declfile="/home/ws/src/firmware/main/main.c" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_test_angle_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_angle_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="791" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="791" bodyend="804" declfile="/home/ws/src/firmware/main/main.c" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sensor_info_sender_timer</definition>
        <argsstring>()</argsstring>
        <name>sensor_info_sender_timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="616" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="616" bodyend="618" declfile="/home/ws/src/firmware/main/main.c" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a0e05a85bd6b4f3dbdb41a50b395bfd03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool twai_request</definition>
        <argsstring>(const twai_message_t *_tx_message, twai_message_t *_rx_message)</argsstring>
        <name>twai_request</name>
        <param>
          <type>const twai_message_t *</type>
          <declname>_tx_message</declname>
        </param>
        <param>
          <type>twai_message_t *</type>
          <declname>_rx_message</declname>
        </param>
        <briefdescription>
<para>Sends a TWAI message and waits for a response with ID verification. </para>
        </briefdescription>
        <detaileddescription>
<para>Transmits a specified message and waits for a response. Verifies that the received message identifier matches the expected motor ID.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_tx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the transmit message structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_rx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the receive message structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid response received with matching motor ID </para>
</simplesect>
<simplesect kind="return"><para>false if no response or ID mismatch</para>
</simplesect>
<simplesect kind="note"><para>Blocks indefinitely during transmission </para>
</simplesect>
<simplesect kind="note"><para>Uses 100ms timeout for reception</para>
</simplesect>
<simplesect kind="warning"><para>Logs error if no reply from motor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="143" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="143" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa7c38b979cd25bdacde2558ab945a494" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool twai_request_wo_id_check</definition>
        <argsstring>(const twai_message_t *_tx_message, twai_message_t *_rx_message)</argsstring>
        <name>twai_request_wo_id_check</name>
        <param>
          <type>const twai_message_t *</type>
          <declname>_tx_message</declname>
        </param>
        <param>
          <type>twai_message_t *</type>
          <declname>_rx_message</declname>
        </param>
        <briefdescription>
<para>Sends a TWAI message and waits for any response without ID check. </para>
        </briefdescription>
        <detaileddescription>
<para>Transmits a message and receives the first available response without verifying the message identifier. Used for general communication.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_tx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the transmit message structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_rx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the receive message structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if any response received within timeout </para>
</simplesect>
<simplesect kind="return"><para>false if no response received</para>
</simplesect>
<simplesect kind="note"><para>Safer version should use ID verification in production </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="174" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="174" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae3afa3e3e8d58277446681e206489ebb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void twai_output</definition>
        <argsstring>(char *tag, twai_message_t *message)</argsstring>
        <name>twai_output</name>
        <param>
          <type>char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>twai_message_t *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="201" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="201" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a791d27b63eaa17c98f506c90e1c5bc96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void find_my_id</definition>
        <argsstring>()</argsstring>
        <name>find_my_id</name>
        <briefdescription>
<para>Discovers motor ID by scanning the address range. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterates through possible motor IDs (0x141 to 0x160) sending discovery messages. Sets global motor_id when valid response is received.</para>
<para><simplesect kind="post"><para>On success: Sets global motor_id and logs found ID </para>
</simplesect>
<simplesect kind="post"><para>On failure: Logs error and motor_id remains unchanged</para>
</simplesect>
\uses twai_request() for communication</para>
<para><simplesect kind="note"><para>Uses fixed discovery message: {.identifier = motor_id, .data = {0x9A, 0x00,...}}</para>
</simplesect>
<simplesect kind="warning"><para>Modifies global motor_id variable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="226" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="226" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aeff2a9c6e23b3b05a7624bd8f133dbd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool motor_request</definition>
        <argsstring>(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)</argsstring>
        <name>motor_request</name>
        <param>
          <type>uint8_t</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d3</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d4</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d5</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d6</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="251" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="251" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a001f71d8e7e29ae8d19f60e95fae2245" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_wo_reply</definition>
        <argsstring>(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)</argsstring>
        <name>motor_request_wo_reply</name>
        <param>
          <type>uint8_t</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d3</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d4</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d5</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d6</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="282" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="282" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa4705fbdc5ad49b3ba0d37135dd67fca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_stop</definition>
        <argsstring>()</argsstring>
        <name>motor_request_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="299" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1914a3422bd63d08fd10135853977cb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_system_reset</definition>
        <argsstring>()</argsstring>
        <name>motor_request_system_reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="306" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="306" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a257f9d7889c17f33ef15c84536567bc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_info</definition>
        <argsstring>()</argsstring>
        <name>motor_request_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="313" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a6d7831f565c6bc48efb152373c264f4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_shutdown</definition>
        <argsstring>()</argsstring>
        <name>motor_request_shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="319" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aaacae416b2e9d21a5cc0d3a0279e35c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_torque</definition>
        <argsstring>(int16_t tau)</argsstring>
        <name>motor_request_torque</name>
        <param>
          <type>int16_t</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="325" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa6f9027af67c1b8972544a2d23a82d53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_speed</definition>
        <argsstring>(int32_t vel)</argsstring>
        <name>motor_request_speed</name>
        <param>
          <type>int32_t</type>
          <declname>vel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="331" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a717bfdfa7a83aa8a4bd4d508f1af8391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool motor_request_is_connected</definition>
        <argsstring>()</argsstring>
        <name>motor_request_is_connected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="338" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="338" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1e936f31cf2296f01fa0a053106549e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_control_task</definition>
        <argsstring>(void *arg)</argsstring>
        <name>motor_control_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="345" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="345" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ad5e7f46eaaaece91cf40c40b898f5f23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_init_function</definition>
        <argsstring>()</argsstring>
        <name>motor_init_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="359" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="359" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aac9e41e227414ff8651286d553adae42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_self_saver_task</definition>
        <argsstring>(void *arg)</argsstring>
        <name>motor_self_saver_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="405" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="405" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_init_setup</definition>
        <argsstring>()</argsstring>
        <name>uart_init_setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="425" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="425" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_event_task</definition>
        <argsstring>(void *pvParameters)</argsstring>
        <name>uart_event_task</name>
        <param>
          <type>void *</type>
          <declname>pvParameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="442" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="442" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtoo</definition>
        <argsstring>()</argsstring>
        <name>rtoo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="466" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="466" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void otor</definition>
        <argsstring>()</argsstring>
        <name>otor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="477" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="477" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sensor_info_sender_task</definition>
        <argsstring>()</argsstring>
        <name>sensor_info_sender_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="601" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="601" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aff4587bedecb7764243868874ab89eb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR enc_linear_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>enc_linear_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="623" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="623" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab0103c68f3e011afcda90de458194fd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR enc_angular_change_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>enc_angular_change_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="629" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="629" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aebbc131dd6416542599b41ef0b0bdc7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR enc_angular_zero_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>enc_angular_zero_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="635" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a7bb6608f7fb818c004a48f3f575f4821" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR btn_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>btn_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="641" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="641" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a7884487d464c8d15b17d77dfb58fa544" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gpio_init_setup</definition>
        <argsstring>()</argsstring>
        <name>gpio_init_setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="650" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="650" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a5b74c511125700f64d5e221ec037277c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cpu_setup</definition>
        <argsstring>()</argsstring>
        <name>cpu_setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="710" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="710" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sensor_tests</definition>
        <argsstring>()</argsstring>
        <name>sensor_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="724" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="724" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="809" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="809" bodyend="858"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main application entry point. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/semphr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_system.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_err.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_pm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/twai.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/uart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------<sp/>Definitions<sp/>------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CTRL_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERIAL_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAVER_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_TASK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_DEFAULT<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TX_GPIO_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RX_GPIO_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_LINEAR_GPIO_1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_LINEAR_GPIO_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_ANGULAR_GPIO_A<sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_ANGULAR_GPIO_B<sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENC_ANGULAR_GPIO_C<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BTN_GPIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_PIN_MASK(PIN)<sp/><sp/><sp/><sp/><sp/><sp/>(1ULL&lt;&lt;PIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ANGLE_STEP_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.08789</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_ECNODER_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12213</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAFE_REGION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INIT_TORQUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REINIT_TORQUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TXD_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RXD_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UART_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_NUM_0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUF_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BAUD_RATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>921600<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERIAL_MS_DELAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERROR_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAIN_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Main&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Debug&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEND_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Motor/Sending&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECIEVE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Motor/Recieving&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READ_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;PC/Recieving&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WRITE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;PC/Sending&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MOTOR_STOP_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/>1000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READY_STATE_COMMAND<sp/><sp/><sp/><sp/><sp/>1000001<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MOTOR_INFO_COMMMAND<sp/><sp/><sp/><sp/><sp/>1000002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RESET_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000003</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>DEBUG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------<sp/>Static<sp/>variables<sp/>------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_timing_config_t<sp/>t_config<sp/>=<sp/>TWAI_TIMING_CONFIG_1MBITS();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_filter_config_t<sp/>f_config<sp/>=<sp/>TWAI_FILTER_CONFIG_ACCEPT_ALL();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_general_config_t<sp/>g_config<sp/>=<sp/>TWAI_GENERAL_CONFIG_DEFAULT(<ref refid="main_8c_1a98b0a06b2764e462ea87110a5aa91ca5" kindref="member">TX_GPIO_CAN</ref>,<sp/><ref refid="main_8c_1aa95f54fc36b7962a273ae23f57262c29" kindref="member">RX_GPIO_CAN</ref>,<sp/>TWAI_MODE_NORMAL);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>motor_control_task_start_sem;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>all_done_sem;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>init_start_sem;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>init_done_sem;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>btn_sem;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>move_sem;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>smert_sem;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>info_please_sem;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SemaphoreHandle_t<sp/>test_sem;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>motor_id<sp/>=<sp/>0x141;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>recieved_packet;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" kindref="member">encoder_position_prev</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>=<sp/>-83;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" kindref="member">encoder_angle_prev</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>not_inited_yet<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_safe_state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" kindref="member">uart_get_delay</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" kindref="member">uart_get_mode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" kindref="member">uart_oper_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" kindref="member">uart_test_btn_state</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" kindref="member">uart_test_encoder_state</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" kindref="member">uart_test_angle_state</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*uart_state)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>sensor_info_sender_delay<sp/>=<sp/><ref refid="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" kindref="member">SERIAL_MS_DELAY</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">TimerHandle_t<sp/><ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" kindref="member">sensor_info_sender_timer</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>mct_handle;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>uet_handle;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>msst_handle;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>sist_handle;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>stt_handle;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Hardware<sp/>CAN<sp/>Functions<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>twai_request(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_message_t<sp/>*_tx_message,<sp/>twai_message_t<sp/>*_rx_message)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_transmit(_tx_message,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_message-&gt;identifier<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>twai_receive(_rx_message,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rx_message-&gt;identifier<sp/>!=<sp/>motor_id)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>reply<sp/>from<sp/>motor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>twai_request_wo_id_check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_message_t<sp/>*_tx_message,<sp/>twai_message_t<sp/>*_rx_message)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_transmit(_tx_message,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_message-&gt;identifier<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>twai_receive(_rx_message,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>twai_output(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tag,<sp/>twai_message_t<sp/>*message)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(tag,<sp/></highlight><highlight class="stringliteral">&quot;%lx<sp/>[%u]<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;identifier,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data_length_code,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[0],<sp/>message-&gt;data[1],<sp/>message-&gt;data[2],<sp/>message-&gt;data[3],<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[4],<sp/>message-&gt;data[5],<sp/>message-&gt;data[6],<sp/>message-&gt;data[7]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_my_id()</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0x141;<sp/>i<sp/>&lt;=<sp/>0x160;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>={.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_id,<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00}};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_request(&amp;tx_message,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx_message.identifier<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_id<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>found,<sp/>motor_id<sp/>is<sp/>%lx&quot;</highlight><highlight class="normal">,<sp/>motor_id);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Motor<sp/>Control<sp/>Functions<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>motor_request(uint8_t<sp/>d0,<sp/>uint8_t<sp/>d1,<sp/>uint8_t<sp/>d2,<sp/>uint8_t<sp/>d3,<sp/>uint8_t<sp/>d4,<sp/>uint8_t<sp/>d5,<sp/>uint8_t<sp/>d6,<sp/>uint8_t<sp/>d7)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>=<sp/>{.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_id,<sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7}};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEGUB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_output(<ref refid="main_8c_1a1e7be5183998bdbe8079e0f3276ada46" kindref="member">SEND_TAG</ref>,<sp/>&amp;tx_message);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!twai_request(&amp;tx_message,<sp/>&amp;rx_message)){</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_output(<ref refid="main_8c_1a3191b64f52225c44bead05ce0937704b" kindref="member">RECIEVE_TAG</ref>,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_output(<ref refid="main_8c_1a3191b64f52225c44bead05ce0937704b" kindref="member">RECIEVE_TAG</ref>,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!twai_request(&amp;tx_message,<sp/>&amp;rx_message)){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_wo_reply(uint8_t<sp/>d0,<sp/>uint8_t<sp/>d1,<sp/>uint8_t<sp/>d2,<sp/>uint8_t<sp/>d3,<sp/>uint8_t<sp/>d4,<sp/>uint8_t<sp/>d5,<sp/>uint8_t<sp/>d6,<sp/>uint8_t<sp/>d7)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>=<sp/>{.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_id,<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7}};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_request_wo_id_check(&amp;tx_message,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_stop()</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x81,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x80,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_system_reset()</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_wo_reply(0x76,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_info()</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_shutdown()</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0x80,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_torque(int16_t<sp/>tau)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0xA1,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>(uint8_t)<sp/>(-tau),<sp/>(uint8_t)<sp/>(-tau<sp/>&gt;&gt;<sp/>8),<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_request_speed(int32_t<sp/>vel)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>vel<sp/>*=<sp/>100;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request(0xA2,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>(uint8_t)<sp/>(vel),<sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>8),<sp/><sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>16),<sp/><sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>24));<sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>motor_request_is_connected(){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>motor_request(0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Motor<sp/>Control<sp/>Task<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_control_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_system_reset();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_info();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(move_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_torque(recieved_packet);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_init_function()</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>torque<sp/>=<sp/><ref refid="main_8c_1afb21a93b38c1ccbd2a1635f9086ed645" kindref="member">INIT_TORQUE</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!not_inited_yet){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque<sp/>=<sp/><ref refid="main_8c_1aaa61e74d6a0accc4b34f963b13083c6f" kindref="member">REINIT_TORQUE</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>motor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_torque(-torque);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>pdMS_TO_TICKS(5000));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>CLICKED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_torque(torque);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>time<sp/>=<sp/>esp_timer_get_time()/1000;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>&lt;<sp/><ref refid="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" kindref="member">MAX_ECNODER_DATA</ref><sp/>/<sp/>2){</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>+<sp/>3000<sp/>&lt;<sp/>esp_timer_get_time()/1000){</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>initialization<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not_inited_yet){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(init_done_sem);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initialize<sp/>ended&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>motor_self_saver_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(init_done_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>not_inited_yet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref>){</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(encoder_position<sp/>&lt;<sp/>SAFE_REGION<sp/>||<sp/>encoder_position<sp/>&gt;<sp/><ref refid="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" kindref="member">MAX_ECNODER_DATA</ref><sp/>-<sp/><ref refid="main_8c_1aad4992ec0ccc026b5ba5926650548255" kindref="member">SAFE_REGION</ref>){</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_safe_state<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Danger<sp/>situation,<sp/>stopping<sp/>motor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_init_function();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_safe_state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>UART<sp/>Handler<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" kindref="member">uart_init_setup</ref>()<sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_config_t<sp/>uart_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baud_rate<sp/>=<sp/><ref refid="main_8c_1ad4455691936f92fdd6c37566fc58ba1f" kindref="member">BAUD_RATE</ref>,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_bits<sp/>=<sp/>UART_DATA_8_BITS,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.parity<sp/>=<sp/>UART_PARITY_DISABLE,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stop_bits<sp/>=<sp/>UART_STOP_BITS_1,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flow_ctrl<sp/>=<sp/>UART_HW_FLOWCTRL_DISABLE,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.source_clk<sp/>=<sp/>UART_SCLK_DEFAULT,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_param_config(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/>&amp;uart_config));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_set_pin(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/><ref refid="main_8c_1a271a735bd865e77e0d27b09e5fd958f2" kindref="member">TXD_PIN</ref>,<sp/><ref refid="main_8c_1adc7d6fe2220359137dc87ba264524f96" kindref="member">RXD_PIN</ref>,<sp/>UART_PIN_NO_CHANGE,<sp/>UART_PIN_NO_CHANGE));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_driver_install(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/><ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref><sp/>*<sp/>2,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0));</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" kindref="member">uart_event_task</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvParameters)<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(<ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(data,<sp/>0,<sp/><ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rxBytes<sp/>=<sp/>uart_read_bytes(<ref refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" kindref="member">UART_PORT</ref>,<sp/>data,<sp/><ref refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>,<sp/>pdMS_TO_TICKS(<ref refid="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" kindref="member">SERIAL_MS_DELAY</ref>));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxBytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state(data);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>UART<sp/>states<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" kindref="member">rtoo</ref>()<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>READY<sp/>to<sp/>OPERATIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" kindref="member">uart_oper_state</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref><sp/>=<sp/>xTimerCreate(</highlight><highlight class="stringliteral">&quot;sensor_info_sender_timer&quot;</highlight><highlight class="normal">,<sp/>pdMS_TO_TICKS(sensor_info_sender_delay),<sp/>pdTRUE,<sp/>0,<sp/><ref refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" kindref="member">sensor_info_sender_timer</ref>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerStart(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" kindref="member">otor</ref>()<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OPERATIONAL<sp/>to<sp/>READY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerStop(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerDelete(<ref refid="main_8c_1aea86bca882c1dff18b6d7bcfe737d526" kindref="member">sensor_info_sender_timer_handle</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;START_OPER&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>operational<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" kindref="member">rtoo</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;RESTART&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(all_done_sem);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;HELP&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Possible<sp/>commands\nSTART_OPER<sp/>-<sp/>starting<sp/>operational<sp/>(experiment)<sp/>state<sp/>\nRESTART<sp/>-<sp/>software<sp/>restart<sp/>the<sp/>controller<sp/>(also<sp/>sofware<sp/>reboots<sp/>motor)\nSTART_TESTS<sp/>-<sp/>hardware<sp/>sensor<sp/>tests\nMOTOR_FIND<sp/>-<sp/>try<sp/>to<sp/>find<sp/>motor<sp/>id<sp/>and<sp/>start<sp/>communicating\nMOTOR_INFO<sp/>-<sp/>requests<sp/>info<sp/>from<sp/>motor<sp/>(voltage,<sp/>temperature,<sp/>errors)\nMOTOR_RESET<sp/>-<sp/>software<sp/>resetting<sp/>the<sp/>motor\nMOTOR_INIT<sp/>-<sp/>centering<sp/>the<sp/>carriage,<sp/>initializing<sp/>true<sp/>encoder<sp/>position<sp/>and<sp/>activating<sp/>dead<sp/>zones\nMOTOR_MODE<sp/>-<sp/>switch<sp/>contolling<sp/>modes\nDATA_SEND_MODE<sp/>-<sp/>cofigure<sp/>sending<sp/>joint<sp/>info<sp/>sending\nENCODER_POSITION<sp/>-<sp/>request<sp/>single<sp/>position\nENCODER_ANGLE<sp/>-<sp/>request<sp/>single<sp/>angle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;START_TESTS&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" kindref="member">uart_test_btn_state</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;HELLO&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;hi<sp/>there&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>motoro<sp/>control<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_MODE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Possible<sp/>variants\nTORQUE,<sp/>SPEED,<sp/>POSITION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" kindref="member">uart_get_mode</ref>;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_FIND&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_my_id();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_RESET&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_system_reset();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_INFO&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_info();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;MOTOR_INIT&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_init_function();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>data<sp/>sending<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;DATA_SEND_MODE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conifgure<sp/>data<sp/>sending<sp/>protocols,<sp/>write<sp/>delay<sp/>(ms)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" kindref="member">uart_get_delay</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;ENCODER_POSITION&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Position<sp/>is<sp/>%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;ENCODER_ANGLE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Angle<sp/>is<sp/>%f&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" kindref="member">uart_get_mode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data){<sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;TORQUE&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>is<sp/>configured<sp/>to<sp/>torque<sp/>control<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;SPEED&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>is<sp/>configured<sp/>to<sp/>speed<sp/>control<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>is<sp/>configured<sp/>to<sp/>position<sp/>control<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" kindref="member">uart_get_delay</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data){</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_info_sender_delay<sp/>=<sp/>atoi(data);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Delay<sp/>is<sp/>configured<sp/>to<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>sensor_info_sender_delay);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" kindref="member">uart_oper_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;i<sp/>recieved&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(data);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;in<sp/>oper<sp/>state\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>recieved_packet<sp/>=<sp/>atoi(data);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in_safe_state)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>&lt;<sp/>INT16_MIN<sp/>||<sp/>recieved_packet<sp/>&gt;<sp/>INT16_MAX){</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1a2012f1090db37579663427aece0ec815" kindref="member">MOTOR_STOP_COMMAND</ref>){</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1a439fa6d18fd0b0edb588a9ead0e1c96d" kindref="member">READY_STATE_COMMAND</ref>)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_stop();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>ready<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" kindref="member">otor</ref>();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1a3dfba5629cbd9c6fd33e0705f38223ef" kindref="member">MOTOR_INFO_COMMMAND</ref>)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_request_info();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recieved_packet<sp/>==<sp/><ref refid="main_8c_1ac950ebd1ed784f784eb48dfe838a5eb1" kindref="member">RESET_COMMAND</ref>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" kindref="member">otor</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(all_done_sem);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recieved_packet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(move_sem);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" kindref="member">sensor_info_sender_task</ref>(){</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1){</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(info_please_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>linear_velocity<sp/>=<sp/>(<ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>-<sp/><ref refid="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" kindref="member">encoder_position_prev</ref>)<sp/>*<sp/>1000<sp/>/<sp/>sensor_info_sender_delay;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angular_velocity<sp/>=<sp/>(<ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>-<sp/><ref refid="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" kindref="member">encoder_angle_prev</ref>)<sp/>*<sp/>1000<sp/>/<sp/>sensor_info_sender_delay;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1aa5f009e33ce5a1af4dfdbadb816bed87" kindref="member">encoder_angle_prev</ref><sp/>=<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1a58c1edc2adf8f6f31bb595a21e782081" kindref="member">encoder_position_prev</ref><sp/>=<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_safe_state){</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>%ld<sp/>%f<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>,<sp/>linear_velocity,<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>,<sp/>angular_velocity);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" kindref="member">sensor_info_sender_timer</ref>(){</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/>xSemaphoreGive(info_please_sem);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">/*--------------------------<sp/>Sensors<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>enc_linear_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref><sp/>+=<sp/>(gpio_get_level(<ref refid="main_8c_1a915403e642b167c299184f42c797d992" kindref="member">ENC_LINEAR_GPIO_1</ref>)<sp/>!=<sp/>gpio_get_level(<ref refid="main_8c_1ae2ae2d204f050a9bbba2b10129cece43" kindref="member">ENC_LINEAR_GPIO_2</ref>))<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>enc_angular_change_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>-=<sp/><ref refid="main_8c_1aee5d1576823e62ca3a2782773b592c2c" kindref="member">ANGLE_STEP_SIZE</ref><sp/>*<sp/>(1<sp/>-<sp/>gpio_get_level(<ref refid="main_8c_1a9e4f2ac9257ce6f3572c176005693d38" kindref="member">ENC_ANGULAR_GPIO_A</ref>)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>enc_angular_zero_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>btn_isr_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref>){</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGiveFromISR(btn_sem,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_init_setup()</highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_1;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.intr_type<sp/>=<sp/>GPIO_INTR_ANYEDGE;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_1.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1a915403e642b167c299184f42c797d992" kindref="member">ENC_LINEAR_GPIO_1</ref>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_1);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_2;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.intr_type<sp/>=<sp/>GPIO_INTR_DISABLE;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_2.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1ae2ae2d204f050a9bbba2b10129cece43" kindref="member">ENC_LINEAR_GPIO_2</ref>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_2);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>angular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_3;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1a9e4f2ac9257ce6f3572c176005693d38" kindref="member">ENC_ANGULAR_GPIO_A</ref>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_3.intr_type<sp/>=<sp/>GPIO_INTR_DISABLE;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_3);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_4;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1ae757297f37dc8a86ef65e94ca81bbd26" kindref="member">ENC_ANGULAR_GPIO_B</ref>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_4.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_4);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_5;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1ac8ffb6e9d68e4a092a57637b71135f5e" kindref="member">ENC_ANGULAR_GPIO_C</ref>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_5.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_5);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>button<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_6;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.pin_bit_mask<sp/>=<sp/><ref refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" kindref="member">GPIO_PIN_MASK</ref>(<ref refid="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" kindref="member">BTN_GPIO</ref>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>io_conf_6.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_6);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupts<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_install_isr_service(<ref refid="main_8c_1af8baf7d9859733667317e58c0ff707d1" kindref="member">ESP_INTR_FLAG_DEFAULT</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1a915403e642b167c299184f42c797d992" kindref="member">ENC_LINEAR_GPIO_1</ref>,<sp/>enc_linear_isr_handler,<sp/>0);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1ae757297f37dc8a86ef65e94ca81bbd26" kindref="member">ENC_ANGULAR_GPIO_B</ref>,<sp/>enc_angular_change_isr_handler,<sp/>0);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1ac8ffb6e9d68e4a092a57637b71135f5e" kindref="member">ENC_ANGULAR_GPIO_C</ref>,<sp/>enc_angular_zero_isr_handler,<sp/>0);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(<ref refid="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" kindref="member">BTN_GPIO</ref>,<sp/>btn_isr_handler,<sp/>0);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>CPU<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a5b74c511125700f64d5e221ec037277c" kindref="member">cpu_setup</ref>()</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_pm_config_t<sp/>pm_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_freq_mhz<sp/>=<sp/>240,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min_freq_mhz<sp/>=<sp/>240,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.light_sleep_enable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_pm_configure(&amp;pm_config);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>Tests<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" kindref="member">sensor_tests</ref>()</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Press<sp/>the<sp/>button&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>0);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(btn_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1ae3a785c814c6a7227a4d1f012a8e1a7d" kindref="member">init_in_progress</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>YOU<sp/>press<sp/>the<sp/>button?<sp/>y/n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>start_encoder_position<sp/>=<sp/><ref refid="main_8c_1a5be258b451963084dd49c7e3ccef3d03" kindref="member">encoder_position</ref>;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>move<sp/>a<sp/>carriage&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_encoder_position<sp/>-<sp/>encoder_position<sp/>&lt;<sp/>1000<sp/>&amp;&amp;<sp/>start_encoder_position<sp/>-<sp/>encoder_position<sp/>&gt;<sp/>-1000){vTaskDelay(pdMS_TO_TICKS(100));}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>YOU<sp/>move<sp/>the<sp/>carriage?<sp/>y/n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start_encoder_angle<sp/>=<sp/><ref refid="main_8c_1a4e42802c1621c60dd5ab0ffed27fa02b" kindref="member">encoder_angle</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Swing<sp/>a<sp/>pendulum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_encoder_angle<sp/>-<sp/>encoder_angle<sp/>&lt;<sp/>30<sp/>&amp;&amp;<sp/>start_encoder_angle<sp/>-<sp/>encoder_angle<sp/>&gt;<sp/>-30){vTaskDelay(pdMS_TO_TICKS(100));}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>YOU<sp/>swing<sp/>the<sp/>pendulum?<sp/>y/n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sem,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tested){</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Tests<sp/>are<sp/>finished&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Malfunctions<sp/>found,<sp/>robot<sp/>needs<sp/>a<sp/>service!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" kindref="member">uart_test_btn_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>works<sp/>properly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>doesnt<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" kindref="member">uart_test_encoder_state</ref>;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" kindref="member">uart_test_encoder_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Encoder<sp/>works<sp/>properly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Encoder<sp/>doesnt<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" kindref="member">uart_test_angle_state</ref>;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" kindref="member">uart_test_angle_state</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Angle<sp/>sensor<sp/>works<sp/>properly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data,<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Angle<sp/>sensor<sp/>doesnt<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" kindref="member">ERROR_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/><ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref>;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sem);</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Main<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a5b74c511125700f64d5e221ec037277c" kindref="member">cpu_setup</ref>();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>tasks,<sp/>queues,<sp/>and<sp/>semaphores</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>all_done_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>move_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>smert_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>btn_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>init_start_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>init_done_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>info_please_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sem<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_init_setup();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" kindref="member">uart_init_setup</ref>();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_driver_install(&amp;g_config,<sp/>&amp;t_config,<sp/>&amp;f_config));</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_start());</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(motor_control_task,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;motor_control&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1a7b5e0b4f961899d86c33d9e13ca7633a" kindref="member">CTRL_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>&amp;mct_handle);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" kindref="member">uart_event_task</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;serial_handler&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1ab6ca39f48ecd3c48ffd44ab7acc49a08" kindref="member">SERIAL_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/>&amp;uet_handle);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(motor_self_saver_task,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;motor_self_saver&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1ab2e0bab723af75f956a0ad1660d95ae8" kindref="member">SAVER_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/><sp/>&amp;msst_handle);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" kindref="member">sensor_info_sender_task</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;jonit_info&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1ab6ca39f48ecd3c48ffd44ab7acc49a08" kindref="member">SERIAL_TSK_PRIO</ref>,<sp/><sp/><sp/><sp/>&amp;sist_handle);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" kindref="member">sensor_tests</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/><ref refid="main_8c_1a18b821454d423ce574a4e08c3d35d1be" kindref="member">TEST_TASK_PRIO</ref>,<sp/><sp/><sp/><sp/><sp/>&amp;stt_handle);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" kindref="member">WRITE_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Ready<sp/>to<sp/>use&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>xSemaphoreTake(all_done_sem,<sp/>portMAX_DELAY);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(mct_handle);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(uet_handle);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(msst_handle);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(sist_handle);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(stt_handle);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_stop());</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_driver_uninstall());</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(all_done_sem);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(move_sem);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(smert_sem);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(btn_sem);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(init_start_sem);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(init_done_sem);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>vSemaphoreDelete(test_sem);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="main_8c_1aafe49c5964527e250000ab014d9e541b" kindref="member">MAIN_TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Restarting...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_restart();</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ws/src/firmware/main/main.c"/>
  </compounddef>
</doxygen>
