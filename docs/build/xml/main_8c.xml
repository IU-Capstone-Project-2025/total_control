<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">freertos/FreeRTOS.h</includes>
    <includes local="yes">freertos/task.h</includes>
    <includes local="yes">freertos/semphr.h</includes>
    <includes local="yes">esp_system.h</includes>
    <includes local="yes">esp_err.h</includes>
    <includes local="yes">esp_log.h</includes>
    <includes local="yes">esp_timer.h</includes>
    <includes local="yes">#include</includes>
    <includes local="yes">driver/uart.h</includes>
    <includes local="yes">driver/timer.h</includes>
    <incdepgraph>
      <node id="12">
        <label>#include</label>
      </node>
      <node id="1">
        <label>/home/ws/src/firmware/main/main.c</label>
        <link refid="main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>driver/timer.h</label>
      </node>
      <node id="13">
        <label>driver/uart.h</label>
      </node>
      <node id="9">
        <label>esp_err.h</label>
      </node>
      <node id="10">
        <label>esp_log.h</label>
      </node>
      <node id="8">
        <label>esp_system.h</label>
      </node>
      <node id="11">
        <label>esp_timer.h</label>
      </node>
      <node id="5">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="7">
        <label>freertos/semphr.h</label>
      </node>
      <node id="6">
        <label>freertos/task.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="main_8c_1a7b5e0b4f961899d86c33d9e13ca7633a" prot="public" static="no">
        <name>CTRL_TSK_PRIO</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&lt; Motor control task priority UART and sensor info task priority </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="28" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ab6ca39f48ecd3c48ffd44ab7acc49a08" prot="public" static="no">
        <name>SERIAL_TSK_PRIO</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safety monitor task priority </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="30" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ab2e0bab723af75f956a0ad1660d95ae8" prot="public" static="no">
        <name>SAVER_TSK_PRIO</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hardware test task priority </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="32" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a18b821454d423ce574a4e08c3d35d1be" prot="public" static="no">
        <name>TEST_TASK_PRIO</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default interrupt flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="34" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1af8baf7d9859733667317e58c0ff707d1" prot="public" static="no">
        <name>ESP_INTR_FLAG_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN TX GPIO </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="36" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a98b0a06b2764e462ea87110a5aa91ca5" prot="public" static="no">
        <name>TX_GPIO_CAN</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN RX GPIO </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="38" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa95f54fc36b7962a273ae23f57262c29" prot="public" static="no">
        <name>RX_GPIO_CAN</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linear encoder channel A </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="40" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a915403e642b167c299184f42c797d992" prot="public" static="no">
        <name>ENC_LINEAR_GPIO_1</name>
        <initializer>19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linear encoder channel B </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="42" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae2ae2d204f050a9bbba2b10129cece43" prot="public" static="no">
        <name>ENC_LINEAR_GPIO_2</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Angular encoder channel A </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="44" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a9e4f2ac9257ce6f3572c176005693d38" prot="public" static="no">
        <name>ENC_ANGULAR_GPIO_A</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Angular encoder channel B </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="46" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae757297f37dc8a86ef65e94ca81bbd26" prot="public" static="no">
        <name>ENC_ANGULAR_GPIO_B</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Angular encoder index signal </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="48" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ac8ffb6e9d68e4a092a57637b71135f5e" prot="public" static="no">
        <name>ENC_ANGULAR_GPIO_C</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User button GPIO </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="50" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" prot="public" static="no">
        <name>BTN_GPIO</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="52" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a284c58b2f63f601826cfcd46eaea929b" prot="public" static="no">
        <name>GPIO_PIN_MASK</name>
        <param><defname>PIN</defname></param>
        <initializer>(1ULL&lt;&lt;PIN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Angular step [rad] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="53" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aee5d1576823e62ca3a2782773b592c2c" prot="public" static="no">
        <name>ANGLE_STEP_SIZE</name>
        <initializer>0.08789</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linear encoder max count </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="55" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" prot="public" static="no">
        <name>MAX_ECNODER_DATA</name>
        <initializer>12213</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safe region threshold </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="57" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aad4992ec0ccc026b5ba5926650548255" prot="public" static="no">
        <name>SAFE_REGION</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initial torque for motor initialization </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="59" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1afb21a93b38c1ccbd2a1635f9086ed645" prot="public" static="no">
        <name>INIT_TORQUE</name>
        <initializer>75</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reinitialization torque for motor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="61" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aaa61e74d6a0accc4b34f963b13083c6f" prot="public" static="no">
        <name>REINIT_TORQUE</name>
        <initializer>75</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UART TX pin </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="63" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a271a735bd865e77e0d27b09e5fd958f2" prot="public" static="no">
        <name>TXD_PIN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UART RX pin </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="66" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1adc7d6fe2220359137dc87ba264524f96" prot="public" static="no">
        <name>RXD_PIN</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UART port </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="68" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa7a5950d998e44d87137de0780bd0af3" prot="public" static="no">
        <name>UART_PORT</name>
        <initializer>UART_NUM_0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UART buffer size </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="70" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" prot="public" static="no">
        <name>BUF_SIZE</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UART baud rate </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="72" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ad4455691936f92fdd6c37566fc58ba1f" prot="public" static="no">
        <name>BAUD_RATE</name>
        <initializer>921600</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UART read delay [ms] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="74" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" prot="public" static="no">
        <name>SERIAL_MS_DELAY</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="76" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa29007116d11e676da62a3ae1dae4402" prot="public" static="no">
        <name>ERROR_TAG</name>
        <initializer>&quot;Error&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="79" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aafe49c5964527e250000ab014d9e541b" prot="public" static="no">
        <name>MAIN_TAG</name>
        <initializer>&quot;Main&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="81" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae6f84e8321c3bc4f546cf4a2a4798064" prot="public" static="no">
        <name>DEBUG_TAG</name>
        <initializer>&quot;Debug&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Motor sending log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="83" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a1e7be5183998bdbe8079e0f3276ada46" prot="public" static="no">
        <name>SEND_TAG</name>
        <initializer>&quot;Motor/Sending&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Motor receiving log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="85" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3191b64f52225c44bead05ce0937704b" prot="public" static="no">
        <name>RECIEVE_TAG</name>
        <initializer>&quot;Motor/Recieving&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PC receiving log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="87" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a0a1ec8eb6dcc1a3e9c83347f9a04974f" prot="public" static="no">
        <name>READ_TAG</name>
        <initializer>&quot;PC/Recieving&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PC sending log tag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="89" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" prot="public" static="no">
        <name>WRITE_TAG</name>
        <initializer>&quot;PC/Sending&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop command code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="91" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a2012f1090db37579663427aece0ec815" prot="public" static="no">
        <name>MOTOR_STOP_COMMAND</name>
        <initializer>1000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ready state command code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="94" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a439fa6d18fd0b0edb588a9ead0e1c96d" prot="public" static="no">
        <name>READY_STATE_COMMAND</name>
        <initializer>1000001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Info request command code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="96" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1a3dfba5629cbd9c6fd33e0705f38223ef" prot="public" static="no">
        <name>MOTOR_INFO_COMMMAND</name>
        <initializer>1000002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset command code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="98" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ac950ebd1ed784f784eb48dfe838a5eb1" prot="public" static="no">
        <name>RESET_COMMAND</name>
        <initializer>1000003</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="100" column="9" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8c_1a4e8264cbbc80f9e64171962e057cebd5" prot="public" static="yes" mutable="no">
        <type>const twai_timing_config_t</type>
        <definition>const twai_timing_config_t can_timing_config</definition>
        <argsstring></argsstring>
        <name>can_timing_config</name>
        <initializer>= TWAI_TIMING_CONFIG_1MBITS()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="110" column="35" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a285f23e585582623ca254246d6d62709" prot="public" static="yes" mutable="no">
        <type>const twai_filter_config_t</type>
        <definition>const twai_filter_config_t can_filter_config</definition>
        <argsstring></argsstring>
        <name>can_filter_config</name>
        <initializer>= TWAI_FILTER_CONFIG_ACCEPT_ALL()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="111" column="35" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1af8caffe722c84623f00646199e7d794b" prot="public" static="yes" mutable="no">
        <type>const twai_general_config_t</type>
        <definition>const twai_general_config_t can_general_config</definition>
        <argsstring></argsstring>
        <name>can_general_config</name>
        <initializer>= TWAI_GENERAL_CONFIG_DEFAULT(TX_CAN_GPIO, RX_CAN_GPIO, TWAI_MODE_NORMAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="112" column="36" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a7319d79ce7cba1449ceaeb04c7519290" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t restart_command_semaphore</definition>
        <argsstring></argsstring>
        <name>restart_command_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="115" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a6077f91cd840aa51f8fc2f4d9943aa74" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t initialization_start_semaphore</definition>
        <argsstring></argsstring>
        <name>initialization_start_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="116" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a634e59001c5a7edeff2f9cbd61011654" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t initialization_done_semaphore</definition>
        <argsstring></argsstring>
        <name>initialization_done_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="117" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a25c9a4a6f413a81b09c576928291518d" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t button_press_semaphore</definition>
        <argsstring></argsstring>
        <name>button_press_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="118" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa299a531c1b911305dacb04fa380ccf5" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t motor_command_semaphore</definition>
        <argsstring></argsstring>
        <name>motor_command_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="119" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a454b3de05aa2bc38dd82d43eaeaff100" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t sensor_data_request_semaphore</definition>
        <argsstring></argsstring>
        <name>sensor_data_request_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="120" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a2a9680ac266694d83b57b2c41d9f794f" prot="public" static="yes" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t test_sync_semaphore</definition>
        <argsstring></argsstring>
        <name>test_sync_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="121" column="26" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1afcae15934f6d39f2b8cd26d5decdc8ad" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t motor_can_id</definition>
        <argsstring></argsstring>
        <name>motor_can_id</name>
        <initializer>= 0x141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="124" column="17" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1af422f836b6e67e4007093489381061fa" prot="public" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t uart_recieved_packet</definition>
        <argsstring></argsstring>
        <name>uart_recieved_packet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="127" column="16" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a1dc0fdc221105e6115fb04a5255921a0" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* motor_operate) (uint32_t)</definition>
        <argsstring>)(uint32_t)</argsstring>
        <name>motor_operate</name>
        <initializer>= <ref refid="main_8c_1ad660a07ca8c737428da215b61e8bd76a" kindref="member">motor_operate_by_torque</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="134" column="8" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a2ef9867a18907056af24f527fd08caad" prot="public" static="yes" mutable="no">
        <type>volatile double</type>
        <definition>volatile double current_encoder_position</definition>
        <argsstring></argsstring>
        <name>current_encoder_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="138" column="24" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1abb298ad776154ffb195444302fcd2503" prot="public" static="yes" mutable="no">
        <type>volatile double</type>
        <definition>volatile double current_encoder_angle</definition>
        <argsstring></argsstring>
        <name>current_encoder_angle</name>
        <initializer>= 179.93</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="139" column="24" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a6ad65fcfa8b93be28658c7b8ba1295b8" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double previous_encoder_position</definition>
        <argsstring></argsstring>
        <name>previous_encoder_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="140" column="15" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa75af8215fae64238b502653440ed193" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double previous_encoder_angle</definition>
        <argsstring></argsstring>
        <name>previous_encoder_angle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="141" column="15" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ac6185459295c47d4b5f748ced7dcdaee" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool initialization_in_progress</definition>
        <argsstring></argsstring>
        <name>initialization_in_progress</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="144" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1af226cfc2f36439e5c9920dfde75651c7" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool not_initiazatied_yet</definition>
        <argsstring></argsstring>
        <name>not_initiazatied_yet</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="145" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a76f99cdc0edd3bc98fad096abf19e295" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool system_in_safe_state</definition>
        <argsstring></argsstring>
        <name>system_in_safe_state</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="146" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aea6c54a26d8beb91b0fbbb948b6d51fb" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* uart_state) (char *)</definition>
        <argsstring>)(char *)</argsstring>
        <name>uart_state</name>
        <initializer>= <ref refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" kindref="member">uart_ready_state</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="157" column="8" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ac0b4618c1d2327f84554ad0976920882" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t sensor_timer_delay</definition>
        <argsstring></argsstring>
        <name>sensor_timer_delay</name>
        <initializer>= UART_DEFAULT_SEND_DELAY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="160" column="17" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1abaf2edf7a1292305203623720b26d4e9" prot="public" static="yes" mutable="no">
        <type>TimerHandle_t</type>
        <definition>TimerHandle_t sensor_timer_handle</definition>
        <argsstring></argsstring>
        <name>sensor_timer_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="161" column="22" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1af00bb0095c4222b40b300208ef8ba6ae" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t motor_control_task_handle</definition>
        <argsstring></argsstring>
        <name>motor_control_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="165" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a6e0df4a8b56c774b726fb47ed2d7c9ed" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t uart_event_task_handle</definition>
        <argsstring></argsstring>
        <name>uart_event_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="166" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa092f31aabdab0b24999368a391435c9" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t safety_monitor_task_handle</definition>
        <argsstring></argsstring>
        <name>safety_monitor_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="167" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1af62a46c39e3233d29f8a8c525f69c9a0" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t sensor_info_sender_task_handle</definition>
        <argsstring></argsstring>
        <name>sensor_info_sender_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="168" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a458746892e56721cc1fd4ed839433efe" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t hardware_test_task_handle</definition>
        <argsstring></argsstring>
        <name>hardware_test_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="169" column="21" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a3d6fc0779dd5c14a0d55ce810df8e792" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool hardware_tests_passed</definition>
        <argsstring></argsstring>
        <name>hardware_tests_passed</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="172" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8c_1ad660a07ca8c737428da215b61e8bd76a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_operate_by_torque</definition>
        <argsstring>(uint32_t torque)</argsstring>
        <name>motor_operate_by_torque</name>
        <param>
          <type>uint32_t</type>
          <declname>torque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="130" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="130" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab8d21881bae79f36a6dd60ca06035b8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_operate_by_speed</definition>
        <argsstring>(uint32_t speed)</argsstring>
        <name>motor_operate_by_speed</name>
        <param>
          <type>uint32_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="131" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ac7660dcbd695ec59c86d4534844cea3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_operate_by_position</definition>
        <argsstring>(uint32_t position)</argsstring>
        <name>motor_operate_by_position</name>
        <param>
          <type>uint32_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="132" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_ready_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_ready_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>UART handler for READY state commands. </para>
        </briefdescription>
        <detaileddescription>
<para>Parses incoming text commands such as START_OPER, RESTART, HELP, and routes to appropriate actions or state transitions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated command string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="589" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="589" bodyend="644" declfile="/home/ws/src/firmware/main/main.c" declline="149" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a4b16c11fd7c43cf6a5bd738b717bb399" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_operational_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_operational_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="150" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab77abeaa59284b40381bd43da99a747a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_set_sender_delay</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_set_sender_delay</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="151" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="151" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae57e57df2a44ddbc17db25241e4e0866" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_set_motor_drive_mode</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_set_motor_drive_mode</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="152" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="152" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ade2308f9034a263f8b37667db5659615" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_test_button</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_button</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="153" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a3ddc9edac2be37fc5ae249d937a3292a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_test_encoder</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_encoder</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="154" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="154" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a5812d4908078838a53bfdd55e04d758b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_test_angle</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_angle</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="155" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="155" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a9a8c516ee8fa0f9af81d773e050095d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sensor_timer_callback</definition>
        <argsstring>()</argsstring>
        <name>sensor_timer_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="162" column="13" declfile="/home/ws/src/firmware/main/main.c" declline="162" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a0e05a85bd6b4f3dbdb41a50b395bfd03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool twai_request</definition>
        <argsstring>(const twai_message_t *_tx_message, twai_message_t *_rx_message)</argsstring>
        <name>twai_request</name>
        <param>
          <type>const twai_message_t *</type>
          <declname>_tx_message</declname>
        </param>
        <param>
          <type>twai_message_t *</type>
          <declname>_rx_message</declname>
        </param>
        <briefdescription>
<para>Sends TWAI message and verifies response ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_tx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit message pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_rx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive buffer pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if response ID matches, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="183" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="183" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa7c38b979cd25bdacde2558ab945a494" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool twai_request_wo_id_check</definition>
        <argsstring>(const twai_message_t *_tx_message, twai_message_t *_rx_message)</argsstring>
        <name>twai_request_wo_id_check</name>
        <param>
          <type>const twai_message_t *</type>
          <declname>_tx_message</declname>
        </param>
        <param>
          <type>twai_message_t *</type>
          <declname>_rx_message</declname>
        </param>
        <briefdescription>
<para>Sends TWAI message without ID check. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_tx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit message pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_rx_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive buffer pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if any response received, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="206" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="206" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae3afa3e3e8d58277446681e206489ebb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void twai_output</definition>
        <argsstring>(char *tag, twai_message_t *message)</argsstring>
        <name>twai_output</name>
        <param>
          <type>char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>twai_message_t *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Logs TWAI message content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>Message pointer to log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="223" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="223" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a791d27b63eaa17c98f506c90e1c5bc96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void find_my_id</definition>
        <argsstring>()</argsstring>
        <name>find_my_id</name>
        <briefdescription>
<para>Discovers motor CAN ID by scanning range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="241" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="241" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aeff2a9c6e23b3b05a7624bd8f133dbd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool motor_request</definition>
        <argsstring>(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)</argsstring>
        <name>motor_request</name>
        <param>
          <type>uint8_t</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d3</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d4</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d5</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d6</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d7</declname>
        </param>
        <briefdescription>
<para>Sends motor command over CAN and waits for optional reply. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a CAN frame with the provided data bytes and transmits it. If DEBUG is disabled, waits for a confirmation response via <ref refid="main_8c_1a0e05a85bd6b4f3dbdb41a50b395bfd03" kindref="member">twai_request()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dX</parametername>
</parameternamelist>
<parameterdescription>
<para>Data bytes to include in the frame. (0-7)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if transmission (and optional reply) succeeded, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="277" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="277" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a001f71d8e7e29ae8d19f60e95fae2245" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_wo_reply</definition>
        <argsstring>(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)</argsstring>
        <name>motor_request_wo_reply</name>
        <param>
          <type>uint8_t</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d3</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d4</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d5</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d6</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>d7</declname>
        </param>
        <briefdescription>
<para>Sends motor command over CAN without waiting for a reply. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs and transmits a CAN frame with the provided data bytes, then ignores any response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dX</parametername>
</parameternamelist>
<parameterdescription>
<para>Data bytes to include in the frame. (0-7) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="315" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="315" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa4705fbdc5ad49b3ba0d37135dd67fca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_stop</definition>
        <argsstring>()</argsstring>
        <name>motor_request_stop</name>
        <briefdescription>
<para>Issues immediate stop command to motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Sends two sequential stop frames to ensure motor halts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="336" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1914a3422bd63d08fd10135853977cb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_system_reset</definition>
        <argsstring>()</argsstring>
        <name>motor_request_system_reset</name>
        <briefdescription>
<para>Triggers a system reset command on the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Sends reset frame and delays for 1 second to allow reboot. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="347" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="347" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a257f9d7889c17f33ef15c84536567bc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_info</definition>
        <argsstring>()</argsstring>
        <name>motor_request_info</name>
        <briefdescription>
<para>Requests telemetry information from the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Sends info request frame to retrieve voltage, temperature, and error codes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="358" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a6d7831f565c6bc48efb152373c264f4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_shutdown</definition>
        <argsstring>()</argsstring>
        <name>motor_request_shutdown</name>
        <briefdescription>
<para>Commands motor to enter shutdown state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="366" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aaacae416b2e9d21a5cc0d3a0279e35c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_torque</definition>
        <argsstring>(int16_t tau)</argsstring>
        <name>motor_request_torque</name>
        <param>
          <type>int16_t</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
<para>Applies signed torque command to the motor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired torque value (signed). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="377" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa6f9027af67c1b8972544a2d23a82d53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_request_speed</definition>
        <argsstring>(int32_t vel)</argsstring>
        <name>motor_request_speed</name>
        <param>
          <type>int32_t</type>
          <declname>vel</declname>
        </param>
        <briefdescription>
<para>Sets motor target velocity. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiplies velocity by 100 (unit scaling) and sends command frame.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired speed in encoder units/sec. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="389" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a717bfdfa7a83aa8a4bd4d508f1af8391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool motor_request_is_connected</definition>
        <argsstring>()</argsstring>
        <name>motor_request_is_connected</name>
        <briefdescription>
<para>Checks if motor responds to info request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if motor acknowledges, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="400" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="400" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1e936f31cf2296f01fa0a053106549e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_control_task</definition>
        <argsstring>(void *arg)</argsstring>
        <name>motor_control_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>FreeRTOS task for motor control operations. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs a system reset and info request on the motor, then enters a loop waiting for torque commands via the move_sem semaphore.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="414" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="414" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ad5e7f46eaaaece91cf40c40b898f5f23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_init_function</definition>
        <argsstring>()</argsstring>
        <name>motor_init_function</name>
        <briefdescription>
<para>Initializes motor by centering encoder and establishing zero position. </para>
        </briefdescription>
        <detaileddescription>
<para>Applies torque in opposite directions and waits for user confirmation via btn_sem. Monitors encoder_position to detect center; enforces timeout of 3 seconds. Signals completion through init_done_sem if first initialization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="435" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="435" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aac9e41e227414ff8651286d553adae42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void motor_self_saver_task</definition>
        <argsstring>(void *arg)</argsstring>
        <name>motor_self_saver_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>FreeRTOS safety monitor task for motor encoder limits. </para>
        </briefdescription>
        <detaileddescription>
<para>Waits for initial motor setup completion, then continuously checks the encoder_position against SAFE_REGION boundaries. If out-of-bounds, logs danger, reinitializes the motor, and restores safe state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="484" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="484" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_init_setup</definition>
        <argsstring>()</argsstring>
        <name>uart_init_setup</name>
        <briefdescription>
<para>Configures UART parameters and installs driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets UART baud rate, data bits, parity, stop bits, and flow control, then configures TX/RX pins and installs the UART driver with buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="509" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="509" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_event_task</definition>
        <argsstring>(void *pvParameters)</argsstring>
        <name>uart_event_task</name>
        <param>
          <type>void *</type>
          <declname>pvParameters</declname>
        </param>
        <briefdescription>
<para>FreeRTOS task for UART event processing. </para>
        </briefdescription>
        <detaileddescription>
<para>Continuously reads bytes from UART into a buffer and invokes the current state handler function pointer with the received data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pvParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused task parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="533" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="533" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtoo</definition>
        <argsstring>()</argsstring>
        <name>rtoo</name>
        <briefdescription>
<para>Switches UART handler to operational state. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates and starts a periodic timer to trigger sensor info reporting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="557" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="557" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void otor</definition>
        <argsstring>()</argsstring>
        <name>otor</name>
        <briefdescription>
<para>Switches UART handler to ready state. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops and deletes the sensor info reporting timer if active. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="572" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="572" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_get_mode</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_get_mode</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>UART handler to set control mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Parses TORQUE, SPEED, or POSITION strings and logs selected mode. Then returns to ready state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated mode string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="654" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="654" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_get_delay</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_get_delay</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>UART handler to configure sensor info delay. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts ASCII data to integer and updates delay for sensor info timer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated numeric string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="681" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="681" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_oper_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_oper_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>UART handler for OPERATIONAL state control packets. </para>
        </briefdescription>
        <detaileddescription>
<para>Parses numeric packets for torque commands or special commands (stop, ready, info, reset), with safety checks on encoder limits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated ASCII packet string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="695" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="695" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sensor_info_sender_task</definition>
        <argsstring>()</argsstring>
        <name>sensor_info_sender_task</name>
        <briefdescription>
<para>FreeRTOS task to publish sensor information. </para>
        </briefdescription>
        <detaileddescription>
<para>Waits on info_please_sem, computes linear and angular velocities, and prints position, velocities, and angle if safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="736" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="736" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sensor_info_sender_timer</definition>
        <argsstring>()</argsstring>
        <name>sensor_info_sender_timer</name>
        <briefdescription>
<para>Timer callback to trigger sensor info task. </para>
        </briefdescription>
        <detaileddescription>
<para>Gives the info_please_sem semaphore to schedule data reporting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="766" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="766" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aff4587bedecb7764243868874ab89eb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR enc_linear_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>enc_linear_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Interrupt Service Routine for linear encoder channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Called on any edge of the linear encoder&apos;s first channel. Compares states of both encoder channels to determine movement direction and increments or decrements the linear encoder position counter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="782" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="782" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab0103c68f3e011afcda90de458194fd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR enc_angular_change_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>enc_angular_change_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Interrupt Service Routine for angular encoder channel B. </para>
        </briefdescription>
        <detaileddescription>
<para>Called on the rising edge of angular encoder channel B. Updates the angular position by a fixed step size depending on the state of channel A to determine direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="796" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="796" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aebbc131dd6416542599b41ef0b0bdc7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR enc_angular_zero_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>enc_angular_zero_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Interrupt Service Routine for angular encoder zero marker. </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the zero position marker is detected on channel C. Resets the angular encoder position to zero for calibration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="809" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="809" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a7bb6608f7fb818c004a48f3f575f4821" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR btn_isr_handler</definition>
        <argsstring>(void *arg)</argsstring>
        <name>btn_isr_handler</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Interrupt Service Routine for button press. </para>
        </briefdescription>
        <detaileddescription>
<para>If initialization is active, gives semaphore from ISR context to signal that the button was pressed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="822" column="23" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="822" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a7884487d464c8d15b17d77dfb58fa544" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gpio_init_setup</definition>
        <argsstring>()</argsstring>
        <name>gpio_init_setup</name>
        <briefdescription>
<para>Initialize GPIO pins and configure interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures all required GPIOs for the linear and angular encoders and the user button. Sets pin modes, pull-downs, and interrupt types. Installs ISR service and attaches handlers to GPIO pins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="837" column="13" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="837" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a5b74c511125700f64d5e221ec037277c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cpu_setup</definition>
        <argsstring>()</argsstring>
        <name>cpu_setup</name>
        <briefdescription>
<para>Configure CPU power management settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the minimum and maximum CPU clock frequencies to maximum value, and disables light sleep to ensure full performance during operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="902" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="902" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sensor_tests</definition>
        <argsstring>()</argsstring>
        <name>sensor_tests</name>
        <briefdescription>
<para>Runs a full sensor and button test sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs in a separate FreeRTOS task. Guides the user through manual tests for the button, linear encoder, and angular encoder. Waits for user confirmation via UART after each step and logs results. Loops endlessly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="922" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="922" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a96867752fbeb1da02accb4566f93b96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_test_btn_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_btn_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Handles UART input to verify button test result. </para>
        </briefdescription>
        <detaileddescription>
<para>Parses user input string to determine whether the button works. Logs result, updates test status, and advances test sequence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user input string (yes/no). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="964" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="964" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_test_encoder_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_encoder_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Handles UART input to verify linear encoder test result. </para>
        </briefdescription>
        <detaileddescription>
<para>Parses user input string to determine whether the linear encoder works. Logs result, updates test status, and advances test sequence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user input string (yes/no). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="987" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="987" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_test_angle_state</definition>
        <argsstring>(char *data)</argsstring>
        <name>uart_test_angle_state</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Handles UART input to verify angular encoder test result. </para>
        </briefdescription>
        <detaileddescription>
<para>Parses user input string to determine whether the angular encoder works. Logs result, updates test status, and finishes test sequence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user input string (yes/no). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="1010" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="1010" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Main entry point for the application. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes CPU, GPIO, UART, CAN bus, tasks, and semaphores. Starts all system tasks and waits for completion. After tasks finish, cleans up all resources and restarts the device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ws/src/firmware/main/main.c" line="1035" column="6" bodyfile="/home/ws/src/firmware/main/main.c" bodystart="1035" bodyend="1082"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main application entry point and firmware for CartPole controller. </para>
    </briefdescription>
    <detaileddescription>
<para>Initializes CPU power management, GPIOs, UART, and CAN interfaces. Creates FreeRTOS tasks for motor control, safety monitoring, UART command handling, sensor data reporting, and hardware tests. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/semphr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_system.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_err.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_pm.h</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#include<sp/>&quot;</highlight><highlight class="normal">driver/twai.h</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">#include<sp/>&quot;</highlight><highlight class="normal">driver/uart.h</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">#include<sp/>&quot;</highlight><highlight class="normal">driver/timer.h</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">/*<sp/>---------------------<sp/>Definitions<sp/>------------------<sp/>*/</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">#define<sp/>CTRL_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">#define<sp/>SERIAL_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">#define<sp/>SAVER_TSK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">#define<sp/>TEST_TASK_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">#define<sp/>ESP_INTR_FLAG_DEFAULT<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">#define<sp/>TX_GPIO_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">#define<sp/>RX_GPIO_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">#define<sp/>ENC_LINEAR_GPIO_1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>19<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">#define<sp/>ENC_LINEAR_GPIO_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>18<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">#define<sp/>ENC_ANGULAR_GPIO_A<sp/><sp/><sp/><sp/><sp/><sp/>5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">#define<sp/>ENC_ANGULAR_GPIO_B<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">#define<sp/>ENC_ANGULAR_GPIO_C<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52" refid="main_8c_1a3fd11360b2c21d74ada8d5dbe813d037" refkind="member"><highlight class="stringliteral">#define<sp/>BTN_GPIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">#define<sp/>GPIO_PIN_MASK(PIN)<sp/><sp/><sp/><sp/><sp/><sp/>(1ULL&lt;&lt;PIN)</highlight></codeline>
<codeline lineno="55" refid="main_8c_1a284c58b2f63f601826cfcd46eaea929b" refkind="member"><highlight class="stringliteral">#define<sp/>ANGLE_STEP_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.08789<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="main_8c_1aee5d1576823e62ca3a2782773b592c2c" refkind="member"><highlight class="stringliteral">#define<sp/>MAX_ECNODER_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12213<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="main_8c_1a0000f4371ef9bcd0f10f610aa8b33713" refkind="member"><highlight class="stringliteral">#define<sp/>SAFE_REGION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="main_8c_1aad4992ec0ccc026b5ba5926650548255" refkind="member"><highlight class="stringliteral">#define<sp/>INIT_TORQUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63" refid="main_8c_1afb21a93b38c1ccbd2a1635f9086ed645" refkind="member"><highlight class="stringliteral">#define<sp/>REINIT_TORQUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66" refid="main_8c_1aaa61e74d6a0accc4b34f963b13083c6f" refkind="member"><highlight class="stringliteral">#define<sp/>TXD_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68" refid="main_8c_1a271a735bd865e77e0d27b09e5fd958f2" refkind="member"><highlight class="stringliteral">#define<sp/>RXD_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="main_8c_1adc7d6fe2220359137dc87ba264524f96" refkind="member"><highlight class="stringliteral">#define<sp/>UART_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_NUM_0<sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="main_8c_1aa7a5950d998e44d87137de0780bd0af3" refkind="member"><highlight class="stringliteral">#define<sp/>BUF_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="main_8c_1a6821bafc3c88dfb2e433a095df9940c6" refkind="member"><highlight class="stringliteral">#define<sp/>BAUD_RATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>921600<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76" refid="main_8c_1ad4455691936f92fdd6c37566fc58ba1f" refkind="member"><highlight class="stringliteral">#define<sp/>SERIAL_MS_DELAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79" refid="main_8c_1a3cbb1e90a146fdb8c3b9da69f159e29d" refkind="member"><highlight class="stringliteral">#define<sp/>ERROR_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Error</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="main_8c_1aa29007116d11e676da62a3ae1dae4402" refkind="member"><highlight class="stringliteral">#define<sp/>MAIN_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Main</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="main_8c_1aafe49c5964527e250000ab014d9e541b" refkind="member"><highlight class="stringliteral">#define<sp/>DEBUG_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Debug</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="main_8c_1ae6f84e8321c3bc4f546cf4a2a4798064" refkind="member"><highlight class="stringliteral">#define<sp/>SEND_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Motor/Sending</highlight><highlight class="stringliteral">&quot;<sp/></highlight></codeline>
<codeline lineno="87" refid="main_8c_1a1e7be5183998bdbe8079e0f3276ada46" refkind="member"><highlight class="stringliteral">#define<sp/>RECIEVE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Motor/Recieving</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89" refid="main_8c_1a3191b64f52225c44bead05ce0937704b" refkind="member"><highlight class="stringliteral">#define<sp/>READ_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">PC/Recieving</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91" refid="main_8c_1a0a1ec8eb6dcc1a3e9c83347f9a04974f" refkind="member"><highlight class="stringliteral">#define<sp/>WRITE_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">PC/Sending</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="94" refid="main_8c_1aa602e63aac535b9c1f7b9fcb18edb895" refkind="member"><highlight class="stringliteral">#define<sp/>MOTOR_STOP_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/>1000000<sp/></highlight></codeline>
<codeline lineno="96" refid="main_8c_1a2012f1090db37579663427aece0ec815" refkind="member"><highlight class="stringliteral">#define<sp/>READY_STATE_COMMAND<sp/><sp/><sp/><sp/><sp/>1000001<sp/></highlight></codeline>
<codeline lineno="98" refid="main_8c_1a439fa6d18fd0b0edb588a9ead0e1c96d" refkind="member"><highlight class="stringliteral">#define<sp/>MOTOR_INFO_COMMMAND<sp/><sp/><sp/><sp/><sp/>1000002<sp/></highlight></codeline>
<codeline lineno="100" refid="main_8c_1a3dfba5629cbd9c6fd33e0705f38223ef" refkind="member"><highlight class="stringliteral">#define<sp/>RESET_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000003<sp/></highlight></codeline>
<codeline lineno="101" refid="main_8c_1ac950ebd1ed784f784eb48dfe838a5eb1" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral">//<sp/>#define<sp/>DEBUG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Debug<sp/>mode<sp/>flag<sp/>(uncomment<sp/>for<sp/>debug)</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">/*<sp/>---------------------<sp/>Static<sp/>variables<sp/>------------------<sp/>*/</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">/*<sp/>CAN<sp/>driver<sp/>configurations<sp/>*/</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral">static<sp/>const<sp/>twai_timing_config_t<sp/>can_timing_config<sp/><sp/>=<sp/>TWAI_TIMING_CONFIG_1MBITS();</highlight></codeline>
<codeline lineno="110" refid="main_8c_1a4e8264cbbc80f9e64171962e057cebd5" refkind="member"><highlight class="stringliteral">static<sp/>const<sp/>twai_filter_config_t<sp/>can_filter_config<sp/><sp/>=<sp/>TWAI_FILTER_CONFIG_ACCEPT_ALL();</highlight></codeline>
<codeline lineno="111" refid="main_8c_1a285f23e585582623ca254246d6d62709" refkind="member"><highlight class="stringliteral">static<sp/>const<sp/>twai_general_config_t<sp/>can_general_config<sp/><sp/>=<sp/>TWAI_GENERAL_CONFIG_DEFAULT(TX_CAN_GPIO,<sp/>RX_CAN_GPIO,<sp/>TWAI_MODE_NORMAL);</highlight></codeline>
<codeline lineno="112" refid="main_8c_1af8caffe722c84623f00646199e7d794b" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral">/*<sp/>System<sp/>synchronization<sp/>primitives<sp/>*/</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>restart_command_semaphore;</highlight></codeline>
<codeline lineno="115" refid="main_8c_1a7319d79ce7cba1449ceaeb04c7519290" refkind="member"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>initialization_start_semaphore;</highlight></codeline>
<codeline lineno="116" refid="main_8c_1a6077f91cd840aa51f8fc2f4d9943aa74" refkind="member"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>initialization_done_semaphore;</highlight></codeline>
<codeline lineno="117" refid="main_8c_1a634e59001c5a7edeff2f9cbd61011654" refkind="member"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>button_press_semaphore;</highlight></codeline>
<codeline lineno="118" refid="main_8c_1a25c9a4a6f413a81b09c576928291518d" refkind="member"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>motor_command_semaphore;</highlight></codeline>
<codeline lineno="119" refid="main_8c_1aa299a531c1b911305dacb04fa380ccf5" refkind="member"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>sensor_data_request_semaphore;</highlight></codeline>
<codeline lineno="120" refid="main_8c_1a454b3de05aa2bc38dd82d43eaeaff100" refkind="member"><highlight class="stringliteral">static<sp/>SemaphoreHandle_t<sp/>test_sync_semaphore;</highlight></codeline>
<codeline lineno="121" refid="main_8c_1a2a9680ac266694d83b57b2c41d9f794f" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">/*<sp/>Device<sp/>identifiers<sp/>*/</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">static<sp/>uint32_t<sp/>motor_can_id<sp/>=<sp/>0x141;</highlight></codeline>
<codeline lineno="124" refid="main_8c_1afcae15934f6d39f2b8cd26d5decdc8ad" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">/*<sp/>Communication<sp/>buffers<sp/>*/</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral">static<sp/>int64_t<sp/>uart_recieved_packet;</highlight></codeline>
<codeline lineno="127" refid="main_8c_1af422f836b6e67e4007093489381061fa" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral">/*<sp/>Motor<sp/>comunication<sp/>function<sp/>*/</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral">static<sp/>void<sp/>motor_operate_by_torque(uint32_t<sp/>torque);</highlight></codeline>
<codeline lineno="130" refid="main_8c_1ad660a07ca8c737428da215b61e8bd76a" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>motor_operate_by_speed(uint32_t<sp/>speed);</highlight></codeline>
<codeline lineno="131" refid="main_8c_1ab8d21881bae79f36a6dd60ca06035b8c" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>motor_operate_by_position(uint32_t<sp/>position);</highlight></codeline>
<codeline lineno="132" refid="main_8c_1ac7660dcbd695ec59c86d4534844cea3d" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral">static<sp/>void<sp/>(*motor_operate)<sp/>(uint32_t)<sp/>=<sp/>motor_operate_by_torque;</highlight></codeline>
<codeline lineno="134" refid="main_8c_1a1dc0fdc221105e6115fb04a5255921a0" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">/*<sp/>Sensor<sp/>state<sp/>*/</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral">static<sp/>volatile<sp/>double<sp/>current_encoder_position;</highlight></codeline>
<codeline lineno="138" refid="main_8c_1a2ef9867a18907056af24f527fd08caad" refkind="member"><highlight class="stringliteral">static<sp/>volatile<sp/>double<sp/>current_encoder_angle<sp/>=<sp/>179.93;</highlight></codeline>
<codeline lineno="139" refid="main_8c_1abb298ad776154ffb195444302fcd2503" refkind="member"><highlight class="stringliteral">static<sp/>double<sp/>previous_encoder_position;</highlight></codeline>
<codeline lineno="140" refid="main_8c_1a6ad65fcfa8b93be28658c7b8ba1295b8" refkind="member"><highlight class="stringliteral">static<sp/>double<sp/>previous_encoder_angle;</highlight></codeline>
<codeline lineno="141" refid="main_8c_1aa75af8215fae64238b502653440ed193" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral">/*<sp/>System<sp/>state<sp/>flags<sp/>*/</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral">static<sp/>bool<sp/>initialization_in_progress<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="144" refid="main_8c_1ac6185459295c47d4b5f748ced7dcdaee" refkind="member"><highlight class="stringliteral">static<sp/>bool<sp/>not_initiazatied_yet<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="145" refid="main_8c_1af226cfc2f36439e5c9920dfde75651c7" refkind="member"><highlight class="stringliteral">static<sp/>bool<sp/>system_in_safe_state<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="146" refid="main_8c_1a76f99cdc0edd3bc98fad096abf19e295" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral">/*<sp/>UART<sp/>state<sp/>machine<sp/>function<sp/>pointers<sp/>*/</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral">static<sp/>void<sp/>uart_ready_state(char*<sp/>data);</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral">static<sp/>void<sp/>uart_operational_state(char*<sp/>data);</highlight></codeline>
<codeline lineno="150" refid="main_8c_1a4b16c11fd7c43cf6a5bd738b717bb399" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>uart_set_sender_delay(char*<sp/>data);</highlight></codeline>
<codeline lineno="151" refid="main_8c_1ab77abeaa59284b40381bd43da99a747a" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>uart_set_motor_drive_mode(char*<sp/>data);</highlight></codeline>
<codeline lineno="152" refid="main_8c_1ae57e57df2a44ddbc17db25241e4e0866" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>uart_test_button<sp/>(char*<sp/>data);</highlight></codeline>
<codeline lineno="153" refid="main_8c_1ade2308f9034a263f8b37667db5659615" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>uart_test_encoder<sp/>(char*<sp/>data);</highlight></codeline>
<codeline lineno="154" refid="main_8c_1a3ddc9edac2be37fc5ae249d937a3292a" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>uart_test_angle<sp/>(char*<sp/>data);</highlight></codeline>
<codeline lineno="155" refid="main_8c_1a5812d4908078838a53bfdd55e04d758b" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral">static<sp/>void<sp/>(*uart_state)(char*)<sp/>=<sp/>uart_ready_state;<sp/></highlight></codeline>
<codeline lineno="157" refid="main_8c_1aea6c54a26d8beb91b0fbbb948b6d51fb" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral">/*<sp/>Sensor<sp/>reporting<sp/>*/</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral">static<sp/>uint16_t<sp/>sensor_timer_delay<sp/>=<sp/>UART_DEFAULT_SEND_DELAY;</highlight></codeline>
<codeline lineno="160" refid="main_8c_1ac0b4618c1d2327f84554ad0976920882" refkind="member"><highlight class="stringliteral">static<sp/>TimerHandle_t<sp/>sensor_timer_handle;</highlight></codeline>
<codeline lineno="161" refid="main_8c_1abaf2edf7a1292305203623720b26d4e9" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>sensor_timer_callback();</highlight></codeline>
<codeline lineno="162" refid="main_8c_1a9a8c516ee8fa0f9af81d773e050095d7" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral">/*<sp/>Task<sp/>handles<sp/>*/</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral">static<sp/>TaskHandle_t<sp/>motor_control_task_handle;</highlight></codeline>
<codeline lineno="165" refid="main_8c_1af00bb0095c4222b40b300208ef8ba6ae" refkind="member"><highlight class="stringliteral">static<sp/>TaskHandle_t<sp/>uart_event_task_handle;</highlight></codeline>
<codeline lineno="166" refid="main_8c_1a6e0df4a8b56c774b726fb47ed2d7c9ed" refkind="member"><highlight class="stringliteral">static<sp/>TaskHandle_t<sp/>safety_monitor_task_handle;</highlight></codeline>
<codeline lineno="167" refid="main_8c_1aa092f31aabdab0b24999368a391435c9" refkind="member"><highlight class="stringliteral">static<sp/>TaskHandle_t<sp/>sensor_info_sender_task_handle;</highlight></codeline>
<codeline lineno="168" refid="main_8c_1af62a46c39e3233d29f8a8c525f69c9a0" refkind="member"><highlight class="stringliteral">static<sp/>TaskHandle_t<sp/>hardware_test_task_handle;</highlight></codeline>
<codeline lineno="169" refid="main_8c_1a458746892e56721cc1fd4ed839433efe" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral">/*<sp/>Test<sp/>status<sp/>*/</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral">static<sp/>bool<sp/>hardware_tests_passed<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="172" refid="main_8c_1a3d6fc0779dd5c14a0d55ce810df8e792" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral">/*<sp/>---------------------------<sp/>Hardware<sp/>CAN<sp/>Functions<sp/>--------------------------<sp/>*/</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral">static<sp/>bool<sp/>twai_request(const<sp/>twai_message_t<sp/>*_tx_message,<sp/>twai_message_t<sp/>*_rx_message)</highlight></codeline>
<codeline lineno="183" refid="main_8c_1a0e05a85bd6b4f3dbdb41a50b395bfd03" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_transmit(_tx_message,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_rx_message-&gt;identifier<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>twai_receive(_rx_message,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(_rx_message-&gt;identifier<sp/>!=<sp/>motor_can_id)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">No<sp/>reply<sp/>from<sp/>motor</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral">static<sp/>bool<sp/>twai_request_wo_id_check(const<sp/>twai_message_t<sp/>*_tx_message,<sp/>twai_message_t<sp/>*_rx_message)</highlight></codeline>
<codeline lineno="206" refid="main_8c_1aa7c38b979cd25bdacde2558ab945a494" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_transmit(_tx_message,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_rx_message-&gt;identifier<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>esp_err_t<sp/>res<sp/>=<sp/>twai_receive(_rx_message,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(res<sp/>==<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral">static<sp/>void<sp/>twai_output(char*<sp/>tag,<sp/>twai_message_t<sp/>*message)</highlight></codeline>
<codeline lineno="223" refid="main_8c_1ae3afa3e3e8d58277446681e206489ebb" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(tag,<sp/>&quot;</highlight><highlight class="normal">%lx<sp/>[%u]<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x<sp/>%02x</highlight><highlight class="stringliteral">&quot;,</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;identifier,</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data_length_code,</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[0],</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[1],</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[2],</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[3],<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[4],</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[5],</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[6],</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;data[7]);</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral">static<sp/>void<sp/>find_my_id()</highlight></codeline>
<codeline lineno="241" refid="main_8c_1a791d27b63eaa17c98f506c90e1c5bc96" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(uint32_t<sp/>i<sp/>=<sp/>0x141;<sp/>i<sp/>&lt;=<sp/>0x160;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>={.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_can_id,<sp/></highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00}};</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_transaction(&amp;tx_message,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rx_message.identifier<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_can_id<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(MAIN_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>found,<sp/><ref refid="main_8c_1afcae15934f6d39f2b8cd26d5decdc8ad" kindref="member">motor_can_id</ref><sp/>is<sp/>%lx</highlight><highlight class="stringliteral">&quot;,<sp/>motor_can_id);</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>not<sp/>found</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral">/*<sp/>---------------------------<sp/>Motor<sp/>Control<sp/>Functions<sp/>--------------------------<sp/>*/</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral">static<sp/>bool<sp/>motor_request(uint8_t<sp/>d0,<sp/>uint8_t<sp/>d1,<sp/>uint8_t<sp/>d2,<sp/>uint8_t<sp/>d3,<sp/>uint8_t<sp/>d4,<sp/>uint8_t<sp/>d5,<sp/>uint8_t<sp/>d6,<sp/>uint8_t<sp/>d7)</highlight></codeline>
<codeline lineno="277" refid="main_8c_1aeff2a9c6e23b3b05a7624bd8f133dbd4" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>=<sp/>{.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_can_id,<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7}};</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEGUB</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>log_can_message(CAN_TX_LOG_TAG,<sp/>&amp;tx_message);</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(!twai_transaction(&amp;tx_message,<sp/>&amp;rx_message)){</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_can_message(CAN_RX_LOG_TAG,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>log_can_message(CAN_RX_LOG_TAG,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#ifndef<sp/>DEBUG</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(!twai_transaction(&amp;tx_message,<sp/>&amp;rx_message)){</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_wo_reply(uint8_t<sp/>d0,<sp/>uint8_t<sp/>d1,<sp/>uint8_t<sp/>d2,<sp/>uint8_t<sp/>d3,<sp/>uint8_t<sp/>d4,<sp/>uint8_t<sp/>d5,<sp/>uint8_t<sp/>d6,<sp/>uint8_t<sp/>d7)</highlight></codeline>
<codeline lineno="315" refid="main_8c_1a001f71d8e7e29ae8d19f60e95fae2245" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_message_t<sp/>rx_message;</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_message_t<sp/>tx_message<sp/>=<sp/>{.extd<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rtr<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ss<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.self<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dlc_non_comp<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.identifier<sp/>=<sp/>motor_can_id,<sp/></highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_length_code<sp/>=<sp/>8,<sp/></highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>{d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7}};</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>twai_request_wo_id_check(&amp;tx_message,<sp/>&amp;rx_message);</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_stop()</highlight></codeline>
<codeline lineno="336" refid="main_8c_1aa4705fbdc5ad49b3ba0d37135dd67fca" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_request(0x81,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/></highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_request(0x80,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_system_reset()</highlight></codeline>
<codeline lineno="347" refid="main_8c_1a1914a3422bd63d08fd10135853977cb4" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_request_wo_reply(0x76,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_info()</highlight></codeline>
<codeline lineno="358" refid="main_8c_1a257f9d7889c17f33ef15c84536567bc1" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_motor_command(0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_shutdown()</highlight></codeline>
<codeline lineno="366" refid="main_8c_1a6d7831f565c6bc48efb152373c264f4f" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_request(0x80,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_torque(int16_t<sp/>tau)</highlight></codeline>
<codeline lineno="377" refid="main_8c_1aaacae416b2e9d21a5cc0d3a0279e35c2" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_request(0xA1,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>(uint8_t)<sp/>(-tau),<sp/>(uint8_t)<sp/>(-tau<sp/>&gt;&gt;<sp/>8),<sp/>0x00,<sp/>0x00);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral">static<sp/>void<sp/>motor_request_speed(int32_t<sp/>vel)</highlight></codeline>
<codeline lineno="389" refid="main_8c_1aa6f9027af67c1b8972544a2d23a82d53" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vel<sp/>*=<sp/>100;</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_request(0xA2,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>(uint8_t)<sp/>(vel),<sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>8),<sp/><sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>16),<sp/><sp/>(uint8_t)<sp/>(vel<sp/>&gt;&gt;<sp/>24));<sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral">static<sp/>bool<sp/>motor_request_is_connected(){</highlight></codeline>
<codeline lineno="400" refid="main_8c_1a717bfdfa7a83aa8a4bd4d508f1af8391" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>motor_request(0x9A,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00);</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral">/*<sp/>---------------------------<sp/>Motor<sp/>Control<sp/>Task<sp/>--------------------------<sp/>*/</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral">static<sp/>void<sp/>motor_control_task(void<sp/>*arg)</highlight></codeline>
<codeline lineno="414" refid="main_8c_1a1e936f31cf2296f01fa0a053106549e1" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_motor_command_system_reset();</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!send_motor_command_is_connected()){</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>no<sp/>connected</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while(1){</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(motor_command_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_operate(uart_recieved_packet);</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral">static<sp/>void<sp/>motor_init_function()</highlight></codeline>
<codeline lineno="435" refid="main_8c_1ad5e7f46eaaaece91cf40c40b898f5f23" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_motor_command_stop();</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialization_in_progress<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(MAIN_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Initializing<sp/>motor</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreTake(button_press_semaphore,<sp/>0);</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_operate_by_speed(-INITIALIZATION_SPPED);</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreTake(button_press_semaphore,<sp/>pdMS_TO_TICKS(5000));</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(MAIN_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Button<sp/>CLICKED</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_motor_command_stop();</highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>current_encoder_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_operate_by_speed(INITIALIZATION_SPPED);</highlight></codeline>
<codeline lineno="452"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int64_t<sp/>time<sp/>=<sp/>esp_timer_get_time()/1000;</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while<sp/>(current_encoder_position<sp/>&lt;<sp/>MAX_LINEAR_ECNODER_VALUE<sp/>/<sp/>2){</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(time<sp/>+<sp/>3000<sp/>&lt;<sp/>esp_timer_get_time()/1000){</highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_motor_command_stop();</highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialization_in_progress<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>initialization<sp/>failed!</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_motor_command_stop();</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>current_encoder_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(not_initiazatied_yet){</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(initialization_done_semaphore);</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialization_in_progress<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_motor_command_zero();</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(MAIN_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Initialize<sp/>ended</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral">static<sp/>void<sp/>motor_self_saver_task(void<sp/>*arg)</highlight></codeline>
<codeline lineno="484" refid="main_8c_1aac9e41e227414ff8651286d553adae42" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreTake(initialization_done_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>not_initiazatied_yet<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while(1){</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!initialization_in_progress){</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((current_encoder_position<sp/>&lt;<sp/>-MAX_LINEAR_ECNODER_VALUE/2<sp/>+<sp/>SAFE_REGION_MARGIN)<sp/>||<sp/>(current_encoder_position<sp/>&gt;<sp/>MAX_LINEAR_ECNODER_VALUE/2<sp/>-<sp/>SAFE_REGION_MARGIN)){</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system_in_safe_state<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Danger<sp/>situation,<sp/>stopping<sp/>motor</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_init_function();</highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system_in_safe_state<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral">/*<sp/>---------------------------<sp/>UART<sp/>Handler<sp/>--------------------------<sp/>*/</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral">void<sp/>uart_init_setup()<sp/></highlight></codeline>
<codeline lineno="509" refid="main_8c_1a1c90310885ebfe159cd31b44df1c5dca" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_config_t<sp/>uart_configuration<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baud_rate<sp/>=<sp/>UART_BAUD_RATE,</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_bits<sp/>=<sp/>UART_DATA_8_BITS,</highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.parity<sp/>=<sp/>UART_PARITY_DISABLE,</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stop_bits<sp/>=<sp/>UART_STOP_BITS_1,</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flow_ctrl<sp/>=<sp/>UART_HW_FLOWCTRL_DISABLE,</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.source_clk<sp/>=<sp/>UART_SCLK_DEFAULT,</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_param_config(UART_PORT_NUMBER,<sp/>&amp;uart_configuration));</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_set_pin(UART_PORT_NUMBER,<sp/>CAN_TX_PIN,<sp/>CAN_RX_PIN,<sp/>UART_PIN_NO_CHANGE,<sp/>UART_PIN_NO_CHANGE));</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(uart_driver_install(UART_PORT_NUMBER,<sp/>UART_BUFFER_SIZE<sp/>*<sp/>2,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0));</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral">void<sp/>uart_event_task(void<sp/>*pvParameters)<sp/></highlight></codeline>
<codeline lineno="533" refid="main_8c_1ac31eb8ff9ad443774bf4b0eebd3bc7bd" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>(char*)<sp/>malloc(UART_BUFFER_SIZE);</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>memset(data,<sp/>0,<sp/>UART_BUFFER_SIZE);</highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!data)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Memory<sp/>allocation<sp/>error</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>rxBytes<sp/>=<sp/>uart_read_bytes(UART_PORT_NUMBER,<sp/>data,<sp/>UART_BUFFER_SIZE,<sp/>pdMS_TO_TICKS(UART_DEFAULT_SEND_DELAY));</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rxBytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state(data);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral">/*<sp/>---------------------------<sp/>UART<sp/>states<sp/>--------------------------<sp/>*/</highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral">void<sp/>rtoo()<sp/><sp/><sp/>//<sp/>READY<sp/>to<sp/>OPERATIONAL</highlight></codeline>
<codeline lineno="557" refid="main_8c_1ae8467b3be586b5c49f21920cb7ff60c2" refkind="member"><highlight class="stringliteral">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_operational_state;</highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sensor_timer_handle<sp/>=<sp/>xTimerCreate(&quot;</highlight><highlight class="normal"><ref refid="main_8c_1a9a8c516ee8fa0f9af81d773e050095d7" kindref="member">sensor_timer_callback</ref></highlight><highlight class="stringliteral">&quot;,<sp/>pdMS_TO_TICKS(sensor_timer_delay),<sp/>pdTRUE,<sp/>0,<sp/>sensor_timer_callback);</highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(sensor_timer_handle<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerStart(sensor_timer_handle,<sp/>0);</highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral">void<sp/>otor()<sp/><sp/><sp/>//<sp/>OPERATIONAL<sp/>to<sp/>READY</highlight></codeline>
<codeline lineno="572" refid="main_8c_1affaa7fe52fc78b5f41a2caa46772043d" refkind="member"><highlight class="stringliteral">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_ready_state;</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(sensor_info_sender_timer_handle<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerStop(sensor_info_sender_timer_handle,<sp/>0);</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimerDelete(sensor_info_sender_timer_handle,<sp/>0);</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="588"><highlight class="stringliteral">void<sp/>uart_ready_state(char*<sp/>data)</highlight></codeline>
<codeline lineno="589" refid="main_8c_1ab41dd3d732fbd82f82f73b9ab83fd4f4" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="590"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">START_OPER</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Starting<sp/>operational<sp/>state</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_ready_to_operational();</highlight></codeline>
<codeline lineno="593"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">RESTART</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(restart_command_semaphore);</highlight></codeline>
<codeline lineno="595"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">HELP</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Possible<sp/>commands\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">START_OPER<sp/>-<sp/>starting<sp/>operational<sp/>(experiment)<sp/>state\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">RESTART<sp/>-<sp/>software<sp/>restart<sp/>the<sp/>controller<sp/>(also<sp/>sofware<sp/>reboots<sp/>motor)\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">START_TESTS<sp/>-<sp/>hardware<sp/>sensor<sp/>tests\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="600"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">MOTOR_FIND<sp/>-<sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>to<sp/>find<sp/>motor<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>and<sp/>start<sp/>communicating\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="601"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">MOTOR_INFO<sp/>-<sp/>requests<sp/>info<sp/>from<sp/>motor<sp/>(voltage,<sp/>temperature,<sp/>errors)\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="602"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">MOTOR_RESET<sp/>-<sp/>software<sp/>resetting<sp/>the<sp/>motor\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="603"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">MOTOR_INIT<sp/>-<sp/>centering<sp/>the<sp/>carriage,<sp/>initializing<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>encoder<sp/>position<sp/>and<sp/>activating<sp/>dead<sp/>zones\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="604"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">MOTOR_MODE<sp/>-<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>contolling<sp/>modes\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="605"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">DATA_SEND_MODE<sp/>-<sp/>cofigure<sp/>sending<sp/>joint<sp/>info<sp/>sending\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">ENCODER_POSITION<sp/>-<sp/>request<sp/>single<sp/>position\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">ENCODER_ANGLE<sp/>-<sp/>request<sp/>single<sp/>angle</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">START_TESTS</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_test_button;</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sync_semaphore);</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">HELLO</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">hi<sp/>there</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="615"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">MOTOR_MODE</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Possible<sp/>variants\nTORQUE,<sp/>SPEED,<sp/>POSITION</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_set_motor_drive_mode;</highlight></codeline>
<codeline lineno="618"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">MOTOR_FIND</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_motor_id();</highlight></codeline>
<codeline lineno="620"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">MOTOR_RESET</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">1000003</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_motor_command_system_reset();</highlight></codeline>
<codeline lineno="622"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">MOTOR_INFO</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_motor_command_status();</highlight></codeline>
<codeline lineno="624"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">MOTOR_INIT</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_init_function();</highlight></codeline>
<codeline lineno="626"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="628"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">DATA_SEND_MODE</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Conifgure<sp/>data<sp/>sending<sp/>protocols,<sp/>write<sp/>delay<sp/>(ms)</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="630"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_set_sender_delay;</highlight></codeline>
<codeline lineno="631"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="632"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">ENCODER_POSITION</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Position<sp/>is<sp/>%f</highlight><highlight class="stringliteral">&quot;,<sp/>current_encoder_position);</highlight></codeline>
<codeline lineno="635"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">ENCODER_ANGLE</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Angle<sp/>is<sp/>%f</highlight><highlight class="stringliteral">&quot;,<sp/>current_encoder_angle);</highlight></codeline>
<codeline lineno="637"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="638"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Undefined<sp/>behaviour</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="641"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="643"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="644"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="653"><highlight class="stringliteral">void<sp/>uart_get_mode(char*<sp/>data){<sp/>//<sp/>TODO</highlight></codeline>
<codeline lineno="654" refid="main_8c_1ae167c28d1ebe9d2b4a4036ab6bc7a1a5" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">TORQUE</highlight><highlight class="stringliteral">&quot;)){</highlight></codeline>
<codeline lineno="655"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_operate<sp/>=<sp/>motor_operate_by_torque;</highlight></codeline>
<codeline lineno="656"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>is<sp/>configured<sp/>to<sp/>torque<sp/>control<sp/>mode</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="657"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">SPEED</highlight><highlight class="stringliteral">&quot;)){</highlight></codeline>
<codeline lineno="658"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_operate<sp/>=<sp/>motor_operate_by_speed;</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>is<sp/>configured<sp/>to<sp/>speed<sp/>control<sp/>mode</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">POSITION</highlight><highlight class="stringliteral">&quot;)){</highlight></codeline>
<codeline lineno="661"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(not_initiazatied_yet)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>should<sp/>be<sp/>initialized<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>behaviour</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="663"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="664"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_operate<sp/>=<sp/>motor_operate_by_position;</highlight></codeline>
<codeline lineno="666"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Motor<sp/>is<sp/>configured<sp/>to<sp/>position<sp/>control<sp/>mode</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="667"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Undefined<sp/>behaviour</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="669"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_ready_state;</highlight></codeline>
<codeline lineno="671"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="672"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="680"><highlight class="stringliteral">void<sp/>uart_get_delay(char*<sp/>data){</highlight></codeline>
<codeline lineno="681" refid="main_8c_1af5ca2d9536e8bfd0d54948d9475c2a81" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sensor_info_sender_delay<sp/>=<sp/>atoi(data);</highlight></codeline>
<codeline lineno="682"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(WRITE_TAG,<sp/>&quot;</highlight><highlight class="normal">Delay<sp/>is<sp/>configured<sp/>to<sp/>%d</highlight><highlight class="stringliteral">&quot;,<sp/>sensor_info_sender_delay);</highlight></codeline>
<codeline lineno="683"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_ready_state;</highlight></codeline>
<codeline lineno="684"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="685"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="694"><highlight class="stringliteral">void<sp/>uart_oper_state(char*<sp/>data)</highlight></codeline>
<codeline lineno="695" refid="main_8c_1a5a0f0d155cedf05c93c7d3fa48a4c553" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="696"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="697"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>printf(&quot;</highlight><highlight class="normal">i<sp/>recieved</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="698"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>printf(data);</highlight></codeline>
<codeline lineno="699"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>printf(&quot;</highlight><highlight class="normal">in<sp/>oper<sp/>state\n</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="700"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="701"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_recieved_packet<sp/>=<sp/>atoi(data);</highlight></codeline>
<codeline lineno="702"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="703"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!system_in_safe_state)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="705"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="707"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(uart_recieved_packet<sp/>&lt;<sp/>INT16_MIN<sp/>||<sp/>uart_recieved_packet<sp/>&gt;<sp/>INT16_MAX){</highlight></codeline>
<codeline lineno="708"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(uart_recieved_packet<sp/>==<sp/>MOTOR_STOP_COMMAND){</highlight></codeline>
<codeline lineno="709"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_motor_command_stop();</highlight></codeline>
<codeline lineno="710"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="711"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(uart_recieved_packet<sp/>==<sp/>READY_STATE_COMMAND)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_motor_command_stop();</highlight></codeline>
<codeline lineno="713"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(MAIN_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Starting<sp/>ready<sp/>state</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="714"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_operational_to_ready();</highlight></codeline>
<codeline lineno="715"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="716"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(uart_recieved_packet<sp/>==<sp/>MOTOR_INFO_COMMMAND)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_motor_command_status();</highlight></codeline>
<codeline lineno="718"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="719"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(uart_recieved_packet<sp/>==<sp/>RESET_COMMAND)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_operational_to_ready();</highlight></codeline>
<codeline lineno="721"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGive(restart_command_semaphore);</highlight></codeline>
<codeline lineno="722"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="723"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_recieved_packet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreGive(motor_command_semaphore);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="735"><highlight class="stringliteral">void<sp/>sensor_info_sender_task(){</highlight></codeline>
<codeline lineno="736" refid="main_8c_1ac8fe4baeda0e2093aee337024f3fcf89" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while<sp/>(1){</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(sensor_data_request_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>linear_velocity<sp/>=<sp/>(current_encoder_position<sp/>-<sp/>previous_encoder_position)<sp/>*<sp/>1000<sp/>/<sp/>sensor_timer_delay;</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_encoder_position<sp/>=<sp/>current_encoder_position;</highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="741"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>angular_velocity<sp/>=<sp/>((int)<sp/>(current_encoder_angle<sp/>-<sp/>previous_encoder_angle)<sp/>%<sp/>360)<sp/>*<sp/>1000<sp/>/<sp/>sensor_timer_delay;</highlight></codeline>
<codeline lineno="742"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(current_encoder_angle<sp/>&gt;<sp/>180){</highlight></codeline>
<codeline lineno="743"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_encoder_angle<sp/>=<sp/>-360<sp/>+<sp/>current_encoder_angle;</highlight></codeline>
<codeline lineno="744"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(current_encoder_angle<sp/>&lt;<sp/>-180){</highlight></codeline>
<codeline lineno="745"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_encoder_angle<sp/>=<sp/>360<sp/>+<sp/>current_encoder_angle;</highlight></codeline>
<codeline lineno="746"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="747"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="748"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_encoder_angle<sp/>=<sp/>current_encoder_angle;</highlight></codeline>
<codeline lineno="749"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="750"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="751"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="752"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="753"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="754"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(system_in_safe_state){</highlight></codeline>
<codeline lineno="755"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;</highlight><highlight class="normal">%.3f<sp/>%.3f<sp/>%.3f<sp/>%.3f\n</highlight><highlight class="stringliteral">&quot;,<sp/>current_encoder_angle,<sp/>angular_velocity,<sp/>current_encoder_position,<sp/>linear_velocity);</highlight></codeline>
<codeline lineno="756"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="759"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="765"><highlight class="stringliteral">void<sp/>sensor_info_sender_timer(){</highlight></codeline>
<codeline lineno="766" refid="main_8c_1a212b17df6656d3d5d40f2bd9555ccd6e" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/>xSemaphoreGive(info_please_sem);</highlight></codeline>
<codeline lineno="767"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="768"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="769"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="770"><highlight class="stringliteral">/*--------------------------<sp/>Sensors<sp/>--------------------------*/</highlight></codeline>
<codeline lineno="771"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="781"><highlight class="stringliteral">static<sp/>void<sp/>IRAM_ATTR<sp/>enc_linear_isr_handler(void*<sp/>arg)</highlight></codeline>
<codeline lineno="782" refid="main_8c_1aff4587bedecb7764243868874ab89eb8" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="783"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>current_encoder_position<sp/>+=<sp/>POSITION_STEP_SIZE<sp/>*<sp/>((gpio_get_level(LINEAR_ENCODER_GPIO_A)<sp/>!=<sp/>gpio_get_level(LINEAR_ENCODER_GPIO_B))<sp/>?<sp/>1<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="784"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="785"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="795"><highlight class="stringliteral">static<sp/>void<sp/>IRAM_ATTR<sp/>enc_angular_change_isr_handler(void*<sp/>arg)</highlight></codeline>
<codeline lineno="796" refid="main_8c_1ab0103c68f3e011afcda90de458194fd1" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="797"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>current_encoder_angle<sp/>+=<sp/>ANGLE_STEP_SIZE<sp/>*<sp/>(1<sp/>-<sp/>gpio_get_level(ANGULAR_ENCODER_GPIO_A)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="798"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="799"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="808"><highlight class="stringliteral">static<sp/>void<sp/>IRAM_ATTR<sp/>enc_angular_zero_isr_handler(void*<sp/>arg)</highlight></codeline>
<codeline lineno="809" refid="main_8c_1aebbc131dd6416542599b41ef0b0bdc7d" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="810"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>current_encoder_angle<sp/>=<sp/>95.626;</highlight></codeline>
<codeline lineno="811"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="812"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="821"><highlight class="stringliteral">static<sp/>void<sp/>IRAM_ATTR<sp/>btn_isr_handler(void*<sp/>arg)</highlight></codeline>
<codeline lineno="822" refid="main_8c_1a7bb6608f7fb818c004a48f3f575f4821" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="823"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(initialization_in_progress){</highlight></codeline>
<codeline lineno="824"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseType_t<sp/>xHigherPriorityTaskWoken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="825"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreGiveFromISR(button_press_semaphore,<sp/>&amp;xHigherPriorityTaskWoken);</highlight></codeline>
<codeline lineno="826"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="828"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="836"><highlight class="stringliteral">static<sp/>void<sp/>gpio_init_setup()</highlight></codeline>
<codeline lineno="837" refid="main_8c_1a7884487d464c8d15b17d77dfb58fa544" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="838"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="839"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>linear</highlight></codeline>
<codeline lineno="840"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_1;</highlight></codeline>
<codeline lineno="841"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_1.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="842"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_1.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="843"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_1.intr_type<sp/>=<sp/>GPIO_INTR_ANYEDGE;</highlight></codeline>
<codeline lineno="844"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_1.pin_bit_mask<sp/>=<sp/>GPIO_PIN_MASK(LINEAR_ENCODER_GPIO_A);</highlight></codeline>
<codeline lineno="845"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_1);</highlight></codeline>
<codeline lineno="846"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="847"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_2;</highlight></codeline>
<codeline lineno="848"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_2.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="849"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_2.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="850"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_2.intr_type<sp/>=<sp/>GPIO_INTR_DISABLE;</highlight></codeline>
<codeline lineno="851"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_2.pin_bit_mask<sp/>=<sp/>GPIO_PIN_MASK(LINEAR_ENCODER_GPIO_B);</highlight></codeline>
<codeline lineno="852"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_2);</highlight></codeline>
<codeline lineno="853"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="854"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>angular</highlight></codeline>
<codeline lineno="855"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_3;</highlight></codeline>
<codeline lineno="856"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_3.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="857"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_3.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="858"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_3.pin_bit_mask<sp/>=<sp/>GPIO_PIN_MASK(ANGULAR_ENCODER_GPIO_A);</highlight></codeline>
<codeline lineno="859"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_3.intr_type<sp/>=<sp/>GPIO_INTR_DISABLE;</highlight></codeline>
<codeline lineno="860"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_3);</highlight></codeline>
<codeline lineno="861"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="862"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_4;</highlight></codeline>
<codeline lineno="863"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_4.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="864"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_4.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="865"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_4.pin_bit_mask<sp/>=<sp/>GPIO_PIN_MASK(ANGULAR_ENCODER_GPIO_B);</highlight></codeline>
<codeline lineno="866"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_4.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline lineno="867"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_4);</highlight></codeline>
<codeline lineno="868"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="869"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_5;</highlight></codeline>
<codeline lineno="870"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_5.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="871"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_5.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="872"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_5.pin_bit_mask<sp/>=<sp/>GPIO_PIN_MASK(ANGULAR_ENCODER_GPIO_C);</highlight></codeline>
<codeline lineno="873"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_5.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline lineno="874"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_5);</highlight></codeline>
<codeline lineno="875"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="876"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>button<sp/></highlight></codeline>
<codeline lineno="877"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config_t<sp/>io_conf_6;</highlight></codeline>
<codeline lineno="878"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_6.pull_down_en<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="879"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_6.mode<sp/>=<sp/>GPIO_MODE_INPUT;</highlight></codeline>
<codeline lineno="880"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_6.pin_bit_mask<sp/>=<sp/>GPIO_PIN_MASK(END_BUTTON_GPIO);</highlight></codeline>
<codeline lineno="881"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>io_conf_6.intr_type<sp/>=<sp/>GPIO_INTR_POSEDGE;</highlight></codeline>
<codeline lineno="882"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_config(&amp;io_conf_6);</highlight></codeline>
<codeline lineno="883"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="884"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>interrupts<sp/></highlight></codeline>
<codeline lineno="885"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_install_isr_service(DEFAULT_INTERRUPT_FLAGS);</highlight></codeline>
<codeline lineno="886"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(LINEAR_ENCODER_GPIO_A,<sp/>linear_encoder_isr,<sp/>0);</highlight></codeline>
<codeline lineno="887"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(ANGULAR_ENCODER_GPIO_B,<sp/>angular_encoder_isr,<sp/>0);</highlight></codeline>
<codeline lineno="888"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(ANGULAR_ENCODER_GPIO_C,<sp/>angular_zero_isr,<sp/>0);</highlight></codeline>
<codeline lineno="889"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpio_isr_handler_add(END_BUTTON_GPIO,<sp/>button_press_isr,<sp/>0);</highlight></codeline>
<codeline lineno="890"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="891"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="892"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="893"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="894"><highlight class="stringliteral">/*<sp/>----------------------------<sp/>CPU<sp/>-------------------------<sp/>*/</highlight></codeline>
<codeline lineno="901"><highlight class="stringliteral">void<sp/>cpu_setup()</highlight></codeline>
<codeline lineno="902" refid="main_8c_1a5b74c511125700f64d5e221ec037277c" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="903"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>esp_pm_config_t<sp/>pm_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_freq_mhz<sp/>=<sp/>240,</highlight></codeline>
<codeline lineno="905"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min_freq_mhz<sp/>=<sp/>240,</highlight></codeline>
<codeline lineno="906"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.light_sleep_enable<sp/>=<sp/>false</highlight></codeline>
<codeline lineno="907"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="908"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>esp_pm_configure(&amp;pm_config);</highlight></codeline>
<codeline lineno="909"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="910"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="911"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="912"><highlight class="stringliteral">/*<sp/>----------------------------<sp/>Tests<sp/>-------------------------<sp/>*/</highlight></codeline>
<codeline lineno="913"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="921"><highlight class="stringliteral">void<sp/>sensor_tests()</highlight></codeline>
<codeline lineno="922" refid="main_8c_1a22a979fedddea9d9cfa7ea5b412831fe" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="923"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware_tests_passed<sp/><sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="925"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sync_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="926"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Press<sp/>the<sp/>button</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialization_in_progress<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(button_press_semaphore,<sp/>0);</highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(button_press_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="930"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialization_in_progress<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="931"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Did<sp/>YOU<sp/>press<sp/>the<sp/>button?<sp/>y/n</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="932"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="933"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sync_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="934"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>start_encoder_position<sp/>=<sp/>current_encoder_position;</highlight></codeline>
<codeline lineno="935"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Now<sp/>move<sp/>a<sp/>carriage</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="936"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(start_encoder_position<sp/>-<sp/>current_encoder_position<sp/>&lt;<sp/>1000<sp/>&amp;&amp;<sp/>start_encoder_position<sp/>-<sp/>current_encoder_position<sp/>&gt;<sp/>-1000){vTaskDelay(pdMS_TO_TICKS(100));}</highlight></codeline>
<codeline lineno="937"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Did<sp/>YOU<sp/>move<sp/>the<sp/>carriage?<sp/>y/n</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="938"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="939"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sync_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="940"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>start_encoder_angle<sp/>=<sp/>current_encoder_angle;</highlight></codeline>
<codeline lineno="941"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Swing<sp/>a<sp/>pendulum</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="942"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(start_encoder_angle<sp/>-<sp/>current_encoder_angle<sp/>&lt;<sp/>30<sp/>&amp;&amp;<sp/>start_encoder_angle<sp/>-<sp/>current_encoder_angle<sp/>&gt;<sp/>-30){vTaskDelay(pdMS_TO_TICKS(100));}</highlight></codeline>
<codeline lineno="943"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Did<sp/>YOU<sp/>swing<sp/>the<sp/>pendulum?<sp/>y/n</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="944"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSemaphoreTake(test_sync_semaphore,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="945"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="946"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(hardware_tests_passed<sp/>){</highlight></codeline>
<codeline lineno="947"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Tests<sp/>are<sp/>finished</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="948"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Malfunctions<sp/>found,<sp/>robot<sp/>needs<sp/>a<sp/>service!</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="950"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="952"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="954"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="963"><highlight class="stringliteral">void<sp/>uart_test_btn_state(char*<sp/>data)</highlight></codeline>
<codeline lineno="964" refid="main_8c_1a96867752fbeb1da02accb4566f93b96e" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="965"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">YES</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">yes</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">y</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Button<sp/>works<sp/>properly</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="967"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">NO</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">no</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">n</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Button<sp/>doesnt<sp/>work</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="969"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware_tests_passed<sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="970"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Undefined<sp/>behaviour</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="972"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="973"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_test_encoder;</highlight></codeline>
<codeline lineno="975"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sync_semaphore);</highlight></codeline>
<codeline lineno="976"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="977"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="986"><highlight class="stringliteral">void<sp/>uart_test_encoder_state(char*<sp/>data)</highlight></codeline>
<codeline lineno="987" refid="main_8c_1afdcf4f2da0664ad2650b1facbe66b331" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="988"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">YES</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">yes</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">y</highlight><highlight class="stringliteral">&quot;)){</highlight></codeline>
<codeline lineno="989"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Encoder<sp/>works<sp/>properly</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="990"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">NO</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">no</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">n</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Encoder<sp/>doesnt<sp/>work</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="992"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware_tests_passed<sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="993"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Undefined<sp/>behaviour</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="995"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="996"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_test_angle;</highlight></codeline>
<codeline lineno="998"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sync_semaphore);</highlight></codeline>
<codeline lineno="999"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1000"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1009"><highlight class="stringliteral">void<sp/>uart_test_angle_state(char*<sp/>data)</highlight></codeline>
<codeline lineno="1010" refid="main_8c_1a1b4a31580b1b4f18a80998192c2bac70" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1011"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">YES</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">yes</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">y</highlight><highlight class="stringliteral">&quot;)){</highlight></codeline>
<codeline lineno="1012"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Angle<sp/>sensor<sp/>works<sp/>properly</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="1013"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">NO</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">no</highlight><highlight class="stringliteral">&quot;)<sp/>||<sp/>strstr((const<sp/>char<sp/>*)data,<sp/>&quot;</highlight><highlight class="normal">n</highlight><highlight class="stringliteral">&quot;))<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Angle<sp/>sensor<sp/>doesnt<sp/>work</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="1015"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hardware_tests_passed<sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1016"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(ERROR_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Undefined<sp/>behaviour</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="1018"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="1019"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_state<sp/>=<sp/>uart_ready_state;</highlight></codeline>
<codeline lineno="1021"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreGive(test_sync_semaphore);</highlight></codeline>
<codeline lineno="1022"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1023"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1024"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1025"><highlight class="stringliteral">/*<sp/>---------------------------<sp/>Main<sp/>--------------------------<sp/>*/</highlight></codeline>
<codeline lineno="1026"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1034"><highlight class="stringliteral">void<sp/>app_main(void)</highlight></codeline>
<codeline lineno="1035" refid="main_8c_1a630544a7f0a2cc40d8a7fefab7e2fe70" refkind="member"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1036"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>configure_cpu();</highlight></codeline>
<codeline lineno="1037"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1038"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//Create<sp/>tasks,<sp/>queues,<sp/>and<sp/>semaphores</highlight></codeline>
<codeline lineno="1039"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>restart_command_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1040"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>motor_command_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1041"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>button_press_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1042"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialization_start_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1043"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialization_done_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1044"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sensor_data_request_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1045"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>test_sync_semaphore<sp/>=<sp/>xSemaphoreCreateBinary();</highlight></codeline>
<codeline lineno="1046"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1047"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>configure_gpio();</highlight></codeline>
<codeline lineno="1048"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uart_configure();</highlight></codeline>
<codeline lineno="1049"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1050"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_driver_install(&amp;can_general_config<sp/>,<sp/>&amp;can_timing_config<sp/>,<sp/>&amp;can_filter_config<sp/>));</highlight></codeline>
<codeline lineno="1051"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_start());</highlight></codeline>
<codeline lineno="1052"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1053"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xTaskCreate(motor_control_task,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">motor_control</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/>CTRL_TSK_PRIORITY,<sp/><sp/><sp/><sp/><sp/><sp/>&amp;motor_control_task_handle);</highlight></codeline>
<codeline lineno="1054"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xTaskCreate(uart_event_task,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">serial_handler</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/>SERIAL_TSK_PRIORITY,<sp/><sp/><sp/><sp/>&amp;uart_event_task_handle);</highlight></codeline>
<codeline lineno="1055"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xTaskCreate(motor_self_saver_task,<sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">motor_self_saver</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/>SAVER_TSK_PRIORITY,<sp/><sp/><sp/><sp/><sp/>&amp;safety_monitor_task_handle);</highlight></codeline>
<codeline lineno="1056"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xTaskCreate(sensor_info_sender_task,<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">jonit_info</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/>SERIAL_TSK_PRIORITY,<sp/><sp/><sp/><sp/>&amp;sensor_info_sender_task_handle);</highlight></codeline>
<codeline lineno="1057"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xTaskCreate(hardware_test_sequence,<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">tests</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4096,<sp/><sp/><sp/>NULL,<sp/><sp/><sp/>TEST_TASK_PRIORITY,<sp/><sp/><sp/><sp/><sp/>&amp;hardware_test_task_handle);</highlight></codeline>
<codeline lineno="1058"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1059"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(TO_PC_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Ready<sp/>to<sp/>use</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="1060"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1061"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>xSemaphoreTake(restart_command_semaphore,<sp/>portMAX_DELAY);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1063"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vTaskDelete(motor_control_task_handle);</highlight></codeline>
<codeline lineno="1064"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vTaskDelete(uart_event_task_handle);</highlight></codeline>
<codeline lineno="1065"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vTaskDelete(safety_monitor_task_handle);</highlight></codeline>
<codeline lineno="1066"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vTaskDelete(sensor_info_sender_task_handle);</highlight></codeline>
<codeline lineno="1067"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vTaskDelete(hardware_test_task_handle);</highlight></codeline>
<codeline lineno="1068"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1069"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_stop());</highlight></codeline>
<codeline lineno="1070"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(twai_driver_uninstall());</highlight></codeline>
<codeline lineno="1071"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1072"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vSemaphoreDelete(restart_command_semaphore);</highlight></codeline>
<codeline lineno="1073"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vSemaphoreDelete(motor_command_semaphore);</highlight></codeline>
<codeline lineno="1074"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vSemaphoreDelete(button_press_semaphore);</highlight></codeline>
<codeline lineno="1075"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vSemaphoreDelete(initialization_start_semaphore);</highlight></codeline>
<codeline lineno="1076"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vSemaphoreDelete(initialization_done_semaphore);</highlight></codeline>
<codeline lineno="1077"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vSemaphoreDelete(test_sync_semaphore);</highlight></codeline>
<codeline lineno="1078"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1079"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ESP_LOGI(MAIN_LOG_TAG,<sp/>&quot;</highlight><highlight class="normal">Restarting...</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="1080"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>esp_restart();</highlight></codeline>
<codeline lineno="1081"><highlight class="stringliteral">}</highlight></codeline>
    </programlisting>
    <location file="/home/ws/src/firmware/main/main.c"/>
  </compounddef>
</doxygen>
